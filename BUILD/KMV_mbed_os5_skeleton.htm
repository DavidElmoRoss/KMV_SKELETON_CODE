<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\BUILD\KMV_mbed_os5_skeleton.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\BUILD\KMV_mbed_os5_skeleton.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Fri Aug 16 14:16:52 2024
<BR><P>
<H3>Maximum Stack Usage =        776 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_GLOBAL__sub_I_main.cpp &rArr; Grove_LCD_RGB_Backlight::Grove_LCD_RGB_Backlight(PinName, PinName) &rArr; mbed::I2C::I2C(PinName, PinName) &rArr; i2c_init &rArr; i2c_init_direct &rArr; I2C_MasterInit &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d8]">mbed_assert_internal</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b9]">mbed_error</a><BR>
 <LI><a href="#[1eb]">osMutexRelease</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bb]">EvrRtxMutexError</a><BR>
 <LI><a href="#[1e9]">osMutexAcquire</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bb]">EvrRtxMutexError</a><BR>
 <LI><a href="#[24d]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b9]">mbed_error</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[31]">ADC0_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[53]">ADC1_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from .\build\except.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[56]">CAN0_Bus_Off_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[89]">CAN0_DriverIRQHandler</a> from .\build\fsl_flexcan.o(.text.CAN0_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[57]">CAN0_Error_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[55]">CAN0_ORed_Message_buffer_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[59]">CAN0_Rx_Warning_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[58]">CAN0_Tx_Warning_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[5a]">CAN0_Wake_Up_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[32]">CMP0_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[33]">CMP1_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[50]">CMP2_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[37]">CMT_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[42]">DAC0_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[52]">DAC1_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[63]">DMA0_DriverIRQHandler</a> from .\build\fsl_edma.o(.text.DMA0_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[a]">DMA0_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[6d]">DMA10_DriverIRQHandler</a> from .\build\fsl_edma.o(.text.DMA10_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[14]">DMA10_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[6e]">DMA11_DriverIRQHandler</a> from .\build\fsl_edma.o(.text.DMA11_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[15]">DMA11_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[6f]">DMA12_DriverIRQHandler</a> from .\build\fsl_edma.o(.text.DMA12_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[16]">DMA12_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[70]">DMA13_DriverIRQHandler</a> from .\build\fsl_edma.o(.text.DMA13_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[17]">DMA13_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[71]">DMA14_DriverIRQHandler</a> from .\build\fsl_edma.o(.text.DMA14_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[18]">DMA14_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[72]">DMA15_DriverIRQHandler</a> from .\build\fsl_edma.o(.text.DMA15_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[19]">DMA15_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[64]">DMA1_DriverIRQHandler</a> from .\build\fsl_edma.o(.text.DMA1_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[b]">DMA1_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[65]">DMA2_DriverIRQHandler</a> from .\build\fsl_edma.o(.text.DMA2_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[c]">DMA2_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[66]">DMA3_DriverIRQHandler</a> from .\build\fsl_edma.o(.text.DMA3_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[d]">DMA3_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[67]">DMA4_DriverIRQHandler</a> from .\build\fsl_edma.o(.text.DMA4_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[e]">DMA4_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[68]">DMA5_DriverIRQHandler</a> from .\build\fsl_edma.o(.text.DMA5_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[f]">DMA5_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[69]">DMA6_DriverIRQHandler</a> from .\build\fsl_edma.o(.text.DMA6_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[10]">DMA6_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[6a]">DMA7_DriverIRQHandler</a> from .\build\fsl_edma.o(.text.DMA7_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[11]">DMA7_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[6b]">DMA8_DriverIRQHandler</a> from .\build\fsl_edma.o(.text.DMA8_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[12]">DMA8_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[6c]">DMA9_DriverIRQHandler</a> from .\build\fsl_edma.o(.text.DMA9_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[13]">DMA9_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[73]">DMA_Error_DriverIRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[1a]">DMA_Error_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[60]">DefaultISR</a> from .\build\startup_mk64f12.o(.text) referenced 153 times from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[8b]">ENET_1588_Timer_DriverIRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[5c]">ENET_1588_Timer_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[8e]">ENET_Error_DriverIRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[5f]">ENET_Error_IRQHandler</a> from .\build\fsl_enet.o(.text.ENET_Error_IRQHandler) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[8d]">ENET_Receive_DriverIRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[5e]">ENET_Receive_IRQHandler</a> from .\build\fsl_enet.o(.text.ENET_Receive_IRQHandler) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[8c]">ENET_Transmit_DriverIRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[5d]">ENET_Transmit_IRQHandler</a> from .\build\fsl_enet.o(.text.ENET_Transmit_IRQHandler) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[1c]">FTFE_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[34]">FTM0_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[35]">FTM1_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[36]">FTM2_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[51]">FTM3_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from .\build\except.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[74]">I2C0_DriverIRQHandler</a> from .\build\fsl_i2c.o(.text.I2C0_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[22]">I2C0_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[75]">I2C1_DriverIRQHandler</a> from .\build\fsl_i2c.o(.text.I2C1_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[23]">I2C1_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[88]">I2C2_DriverIRQHandler</a> from .\build\fsl_i2c.o(.text.I2C2_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[54]">I2C2_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[79]">I2S0_Rx_DriverIRQHandler</a> from .\build\fsl_sai.o(.text.I2S0_Rx_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[27]">I2S0_Rx_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[78]">I2S0_Tx_DriverIRQHandler</a> from .\build\fsl_sai.o(.text.I2S0_Tx_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[26]">I2S0_Tx_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[1f]">LLWU_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[44]">LPTMR0_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[1e]">LVD_LVW_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[43]">MCG_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[1b]">MCM_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from .\build\except.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from .\build\mbed_overrides.o(.text.NMI_Handler) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[3e]">PDB0_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[3a]">PIT0_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[3b]">PIT1_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[3c]">PIT2_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[3d]">PIT3_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[45]">PORTA_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[46]">PORTB_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[47]">PORTC_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[48]">PORTD_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[49]">PORTE_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from .\build\irq_cm4f.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[21]">RNG_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[38]">RTC_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[39]">RTC_Seconds_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[1d]">Read_Collision_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[41]">Reserved71_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[8a]">SDHC_DriverIRQHandler</a> from .\build\fsl_sdhc.o(.text.SDHC_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[5b]">SDHC_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[76]">SPI0_DriverIRQHandler</a> from .\build\fsl_dspi.o(.text.SPI0_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[24]">SPI0_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[77]">SPI1_DriverIRQHandler</a> from .\build\fsl_dspi.o(.text.SPI1_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[25]">SPI1_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[83]">SPI2_DriverIRQHandler</a> from .\build\fsl_dspi.o(.text.SPI2_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[4b]">SPI2_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from .\build\irq_cm4f.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[4a]">SWI_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from .\build\irq_cm4f.o(.text) referenced 2 times from .\build\rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[9]">SysTick_Handler</a> from .\build\irq_cm4f.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[61]">SystemInit</a> from .\build\system_mk64f12.o(.text.SystemInit) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[7c]">UART0_ERR_DriverIRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[2a]">UART0_ERR_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[7a]">UART0_LON_DriverIRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[28]">UART0_LON_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[7b]">UART0_RX_TX_DriverIRQHandler</a> from .\build\fsl_uart.o(.text.UART0_RX_TX_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[29]">UART0_RX_TX_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[7e]">UART1_ERR_DriverIRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[2c]">UART1_ERR_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[7d]">UART1_RX_TX_DriverIRQHandler</a> from .\build\fsl_uart.o(.text.UART1_RX_TX_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[2b]">UART1_RX_TX_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[80]">UART2_ERR_DriverIRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[2e]">UART2_ERR_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[7f]">UART2_RX_TX_DriverIRQHandler</a> from .\build\fsl_uart.o(.text.UART2_RX_TX_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[2d]">UART2_RX_TX_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[82]">UART3_ERR_DriverIRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[30]">UART3_ERR_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[81]">UART3_RX_TX_DriverIRQHandler</a> from .\build\fsl_uart.o(.text.UART3_RX_TX_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[2f]">UART3_RX_TX_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[85]">UART4_ERR_DriverIRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[4d]">UART4_ERR_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[84]">UART4_RX_TX_DriverIRQHandler</a> from .\build\fsl_uart.o(.text.UART4_RX_TX_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[4c]">UART4_RX_TX_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[87]">UART5_ERR_DriverIRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[4f]">UART5_ERR_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[86]">UART5_RX_TX_DriverIRQHandler</a> from .\build\fsl_uart.o(.text.UART5_RX_TX_DriverIRQHandler) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[4e]">UART5_RX_TX_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[3f]">USB0_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[40]">USBDCD_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from .\build\except.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[20]">WDOG_EWM_IRQHandler</a> from .\build\startup_mk64f12.o(.text) referenced from .\build\startup_mk64f12.o(RESET)
 <LI><a href="#[10d]">_GLOBAL__sub_I_main.cpp</a> from .\build\main.o(.text._GLOBAL__sub_I_main.cpp) referenced from .\build\main.o(.init_array)
 <LI><a href="#[10e]">default_idle_hook()</a> from .\build\mbed_rtx_idle.o(.text._ZL17default_idle_hookv) referenced from .\build\mbed_rtx_idle.o(.data._ZL14idle_hook_fptr)
 <LI><a href="#[93]">rtos_event_pending(void*)</a> from .\build\mbed_rtx_idle.o(.text._ZL18rtos_event_pendingPv) referenced 2 times from .\build\mbed_rtx_idle.o(.text._ZL17default_idle_hookv)
 <LI><a href="#[b9]">DirectSerial::read(void*, unsigned int)</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerial4readEPvj) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[bb]">DirectSerial::seek(long, int)</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerial4seekEli) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[c1]">DirectSerial::size()</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerial4sizeEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[bc]">DirectSerial::close()</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerial5closeEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[ba]">DirectSerial::write(void const*, unsigned int)</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerial5writeEPKvj) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[be]">DirectSerial::isatty()</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerial6isattyEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[b8]">DirectSerial::~DirectSerial__deallocating()</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerialD0Ev) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[cc]">Grove_LCD_RGB_Backlight::write(unsigned char)</a> from .\build\grove_lcd_rgb_backlight.o(.text._ZN23Grove_LCD_RGB_Backlight5writeEh) referenced from .\build\grove_lcd_rgb_backlight.o(.rodata._ZTV23Grove_LCD_RGB_Backlight)
 <LI><a href="#[c8]">mbed::FileHandle::enable_input(bool)</a> from .\build\file.o(.text._ZN4mbed10FileHandle12enable_inputEb) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[c8]">mbed::FileHandle::enable_input(bool)</a> from .\build\file.o(.text._ZN4mbed10FileHandle12enable_inputEb) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[c8]">mbed::FileHandle::enable_input(bool)</a> from .\build\file.o(.text._ZN4mbed10FileHandle12enable_inputEb) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[c8]">mbed::FileHandle::enable_input(bool)</a> from .\build\file.o(.text._ZN4mbed10FileHandle12enable_inputEb) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[c6]">mbed::FileHandle::set_blocking(bool)</a> from .\build\file.o(.text._ZN4mbed10FileHandle12set_blockingEb) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[c6]">mbed::FileHandle::set_blocking(bool)</a> from .\build\file.o(.text._ZN4mbed10FileHandle12set_blockingEb) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[c6]">mbed::FileHandle::set_blocking(bool)</a> from .\build\file.o(.text._ZN4mbed10FileHandle12set_blockingEb) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[c6]">mbed::FileHandle::set_blocking(bool)</a> from .\build\file.o(.text._ZN4mbed10FileHandle12set_blockingEb) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[c9]">mbed::FileHandle::enable_output(bool)</a> from .\build\file.o(.text._ZN4mbed10FileHandle13enable_outputEb) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[c9]">mbed::FileHandle::enable_output(bool)</a> from .\build\file.o(.text._ZN4mbed10FileHandle13enable_outputEb) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[c9]">mbed::FileHandle::enable_output(bool)</a> from .\build\file.o(.text._ZN4mbed10FileHandle13enable_outputEb) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[c9]">mbed::FileHandle::enable_output(bool)</a> from .\build\file.o(.text._ZN4mbed10FileHandle13enable_outputEb) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[c5]">mbed::FileHandle::flen()</a> from .\build\file.o(.text._ZN4mbed10FileHandle4flenEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[c5]">mbed::FileHandle::flen()</a> from .\build\file.o(.text._ZN4mbed10FileHandle4flenEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[c5]">mbed::FileHandle::flen()</a> from .\build\file.o(.text._ZN4mbed10FileHandle4flenEv) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[c5]">mbed::FileHandle::flen()</a> from .\build\file.o(.text._ZN4mbed10FileHandle4flenEv) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[d0]">mbed::FileHandle::size()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle4sizeEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[bd]">mbed::FileHandle::sync()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle4syncEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[bd]">mbed::FileHandle::sync()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle4syncEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[bf]">mbed::FileHandle::tell()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle4tellEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[bf]">mbed::FileHandle::tell()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle4tellEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[c4]">mbed::FileHandle::fsync()</a> from .\build\file.o(.text._ZN4mbed10FileHandle5fsyncEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[c4]">mbed::FileHandle::fsync()</a> from .\build\file.o(.text._ZN4mbed10FileHandle5fsyncEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[c4]">mbed::FileHandle::fsync()</a> from .\build\file.o(.text._ZN4mbed10FileHandle5fsyncEv) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[c4]">mbed::FileHandle::fsync()</a> from .\build\file.o(.text._ZN4mbed10FileHandle5fsyncEv) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[c3]">mbed::FileHandle::lseek(long, int)</a> from .\build\file.o(.text._ZN4mbed10FileHandle5lseekEli) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[c3]">mbed::FileHandle::lseek(long, int)</a> from .\build\file.o(.text._ZN4mbed10FileHandle5lseekEli) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[c3]">mbed::FileHandle::lseek(long, int)</a> from .\build\file.o(.text._ZN4mbed10FileHandle5lseekEli) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[c3]">mbed::FileHandle::lseek(long, int)</a> from .\build\file.o(.text._ZN4mbed10FileHandle5lseekEli) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[cb]">mbed::FileHandle::sigio(mbed::Callback&lang;void ()&rang;)</a> from .\build\file.o(.text._ZN4mbed10FileHandle5sigioENS_8CallbackIFvvEEE) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[cb]">mbed::FileHandle::sigio(mbed::Callback&lang;void ()&rang;)</a> from .\build\file.o(.text._ZN4mbed10FileHandle5sigioENS_8CallbackIFvvEEE) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[cb]">mbed::FileHandle::sigio(mbed::Callback&lang;void ()&rang;)</a> from .\build\file.o(.text._ZN4mbed10FileHandle5sigioENS_8CallbackIFvvEEE) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[cb]">mbed::FileHandle::sigio(mbed::Callback&lang;void ()&rang;)</a> from .\build\file.o(.text._ZN4mbed10FileHandle5sigioENS_8CallbackIFvvEEE) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[cf]">mbed::FileHandle::isatty()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle6isattyEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[c0]">mbed::FileHandle::rewind()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle6rewindEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[c0]">mbed::FileHandle::rewind()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle6rewindEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[c2]">mbed::FileHandle::truncate(long)</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle8truncateEl) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[c2]">mbed::FileHandle::truncate(long)</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle8truncateEl) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[c2]">mbed::FileHandle::truncate(long)</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle8truncateEl) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[c2]">mbed::FileHandle::truncate(long)</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle8truncateEl) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[cd]">mbed::FileHandle::~FileHandle__deallocating()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandleD0Ev) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[b7]">mbed::FileHandle::~FileHandle__sub_object()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandleD2Ev) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[b7]">mbed::FileHandle::~FileHandle__sub_object()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandleD2Ev) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[94]">mbed::SerialBase::_irq_handler(unsigned int, SerialIrq)</a> from .\build\serialbase.o(.text._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq) referenced 2 times from .\build\serialbase.o(.text._ZN4mbed10SerialBase5_initEv)
 <LI><a href="#[d2]">mbed::SerialBase::lock()</a> from .\build\serialbase.o(.text._ZN4mbed10SerialBase4lockEv) referenced from .\build\serialbase.o(.rodata._ZTVN4mbed10SerialBaseE)
 <LI><a href="#[95]">mbed::SerialBase::_init()</a> from .\build\serialbase.o(.text._ZN4mbed10SerialBase5_initEv) referenced 2 times from .\build\serialbase.o(.text._ZN4mbed10SerialBaseC2E7PinNameS1_i)
 <LI><a href="#[d3]">mbed::SerialBase::unlock()</a> from .\build\serialbase.o(.text._ZN4mbed10SerialBase6unlockEv) referenced from .\build\serialbase.o(.rodata._ZTVN4mbed10SerialBaseE)
 <LI><a href="#[d5]">mbed::SerialBase::~SerialBase__deallocating()</a> from .\build\serialbase.o(.text._ZN4mbed10SerialBaseD0Ev) referenced from .\build\serialbase.o(.rodata._ZTVN4mbed10SerialBaseE)
 <LI><a href="#[d4]">mbed::SerialBase::~SerialBase__sub_object()</a> from .\build\serialbase.o(.text._ZN4mbed10SerialBaseD2Ev) referenced from .\build\serialbase.o(.rodata._ZTVN4mbed10SerialBaseE)
 <LI><a href="#[97]">mbed::TimerEvent::irq(unsigned int)</a> from .\build\timerevent.o(.text._ZN4mbed10TimerEvent3irqEj) referenced 2 times from .\build\timerevent.o(.text._ZN4mbed10TimerEventC2EPK13ticker_data_t)
 <LI><a href="#[d7]">mbed::TimerEvent::~TimerEvent__deallocating()</a> from .\build\timerevent.o(.text._ZN4mbed10TimerEventD0Ev) referenced from .\build\timerevent.o(.rodata._ZTVN4mbed10TimerEventE)
 <LI><a href="#[d6]">mbed::TimerEvent::~TimerEvent__sub_object()</a> from .\build\timerevent.o(.text._ZN4mbed10TimerEventD2Ev) referenced from .\build\timerevent.o(.rodata._ZTVN4mbed10TimerEventE)
 <LI><a href="#[d8]">mbed::I2C::lock()</a> from .\build\i2c.o(.text._ZN4mbed3I2C4lockEv) referenced from .\build\i2c.o(.rodata._ZTVN4mbed3I2CE)
 <LI><a href="#[d9]">mbed::I2C::unlock()</a> from .\build\i2c.o(.text._ZN4mbed3I2C6unlockEv) referenced from .\build\i2c.o(.rodata._ZTVN4mbed3I2CE)
 <LI><a href="#[db]">mbed::I2C::~I2C__deallocating()</a> from .\build\i2c.o(.text._ZN4mbed3I2CD0Ev) referenced from .\build\i2c.o(.rodata._ZTVN4mbed3I2CE)
 <LI><a href="#[da]">mbed::I2C::~I2C__sub_object()</a> from .\build\i2c.o(.text._ZN4mbed3I2CD2Ev) referenced from .\build\i2c.o(.rodata._ZTVN4mbed3I2CE)
 <LI><a href="#[dc]">mbed::Serial::lock()</a> from .\build\serial.o(.text._ZN4mbed6Serial4lockEv) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[df]">mbed::Serial::_getc()</a> from .\build\serial.o(.text._ZN4mbed6Serial5_getcEv) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[e0]">mbed::Serial::_putc(int)</a> from .\build\serial.o(.text._ZN4mbed6Serial5_putcEi) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[dd]">mbed::Serial::unlock()</a> from .\build\serial.o(.text._ZN4mbed6Serial6unlockEv) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[de]">mbed::Serial::~Serial__deallocating()</a> from .\build\serial.o(.text._ZN4mbed6SerialD0Ev) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[92]">mbed::Serial::~Serial__sub_object()</a> from .\build\main.o(.text._ZN4mbed6SerialD2Ev) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[92]">mbed::Serial::~Serial__sub_object()</a> from .\build\main.o(.text._ZN4mbed6SerialD2Ev) referenced 2 times from .\build\main.o(.text._GLOBAL__sub_I_main.cpp)
 <LI><a href="#[f4]">mbed::Stream::lock()</a> from .\build\stream.o(.text._ZN4mbed6Stream4lockEv) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[e3]">mbed::Stream::read(void*, unsigned int)</a> from .\build\stream.o(.text._ZN4mbed6Stream4readEPvj) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[e3]">mbed::Stream::read(void*, unsigned int)</a> from .\build\stream.o(.text._ZN4mbed6Stream4readEPvj) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[e5]">mbed::Stream::seek(long, int)</a> from .\build\stream.o(.text._ZN4mbed6Stream4seekEli) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[e5]">mbed::Stream::seek(long, int)</a> from .\build\stream.o(.text._ZN4mbed6Stream4seekEli) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[eb]">mbed::Stream::size()</a> from .\build\stream.o(.text._ZN4mbed6Stream4sizeEv) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[eb]">mbed::Stream::size()</a> from .\build\stream.o(.text._ZN4mbed6Stream4sizeEv) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[e7]">mbed::Stream::sync()</a> from .\build\stream.o(.text._ZN4mbed6Stream4syncEv) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[e7]">mbed::Stream::sync()</a> from .\build\stream.o(.text._ZN4mbed6Stream4syncEv) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[e9]">mbed::Stream::tell()</a> from .\build\stream.o(.text._ZN4mbed6Stream4tellEv) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[e9]">mbed::Stream::tell()</a> from .\build\stream.o(.text._ZN4mbed6Stream4tellEv) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[e6]">mbed::Stream::close()</a> from .\build\stream.o(.text._ZN4mbed6Stream5closeEv) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[e6]">mbed::Stream::close()</a> from .\build\stream.o(.text._ZN4mbed6Stream5closeEv) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[e4]">mbed::Stream::write(void const*, unsigned int)</a> from .\build\stream.o(.text._ZN4mbed6Stream5writeEPKvj) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[e4]">mbed::Stream::write(void const*, unsigned int)</a> from .\build\stream.o(.text._ZN4mbed6Stream5writeEPKvj) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[e8]">mbed::Stream::isatty()</a> from .\build\stream.o(.text._ZN4mbed6Stream6isattyEv) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[e8]">mbed::Stream::isatty()</a> from .\build\stream.o(.text._ZN4mbed6Stream6isattyEv) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[ea]">mbed::Stream::rewind()</a> from .\build\stream.o(.text._ZN4mbed6Stream6rewindEv) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[ea]">mbed::Stream::rewind()</a> from .\build\stream.o(.text._ZN4mbed6Stream6rewindEv) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[f5]">mbed::Stream::unlock()</a> from .\build\stream.o(.text._ZN4mbed6Stream6unlockEv) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[f3]">mbed::Stream::~Stream__deallocating()</a> from .\build\stream.o(.text._ZN4mbed6StreamD0Ev) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[f2]">mbed::Stream::~Stream__sub_object()</a> from .\build\stream.o(.text._ZN4mbed6StreamD2Ev) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[f9]">mbed::FileBase::~FileBase__deallocating()</a> from .\build\filebase.o(.text._ZN4mbed8FileBaseD0Ev) referenced from .\build\filebase.o(.rodata._ZTVN4mbed8FileBaseE)
 <LI><a href="#[f8]">mbed::FileBase::~FileBase__sub_object()</a> from .\build\filebase.o(.text._ZN4mbed8FileBaseD2Ev) referenced from .\build\filebase.o(.rodata._ZTVN4mbed8FileBaseE)
 <LI><a href="#[fc]">mbed::internal::SysTimer&lang;1000u, true&rang;::handler()</a> from .\build\systimer.o(.text._ZN4mbed8internal8SysTimerILj1000ELb1EE7handlerEv) referenced from .\build\systimer.o(.rodata._ZTVN4mbed8internal8SysTimerILj1000ELb1EEE)
 <LI><a href="#[fb]">mbed::internal::SysTimer&lang;1000u, true&rang;::~SysTimer__deallocating()</a> from .\build\systimer.o(.text._ZN4mbed8internal8SysTimerILj1000ELb1EED0Ev) referenced from .\build\systimer.o(.rodata._ZTVN4mbed8internal8SysTimerILj1000ELb1EEE)
 <LI><a href="#[fa]">mbed::internal::SysTimer&lang;1000u, true&rang;::~SysTimer__sub_object()</a> from .\build\systimer.o(.text._ZN4mbed8internal8SysTimerILj1000ELb1EED2Ev) referenced from .\build\systimer.o(.rodata._ZTVN4mbed8internal8SysTimerILj1000ELb1EEE)
 <LI><a href="#[96]">CThunk&lang;mbed::SerialBase&rang;::trampoline(CThunkBase*)</a> from .\build\serialbase.o(.text._ZN6CThunkIN4mbed10SerialBaseEE10trampolineEP10CThunkBase) referenced 2 times from .\build\serialbase.o(.text._ZN4mbed10SerialBaseC2E7PinNameS1_i)
 <LI><a href="#[ca]">DirectSerial::poll(short) const</a> from .\build\mbed_retarget.o(.text._ZNK12DirectSerial4pollEs) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[c7]">mbed::FileHandle::is_blocking() const</a> from .\build\file.o(.text._ZNK4mbed10FileHandle11is_blockingEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[c7]">mbed::FileHandle::is_blocking() const</a> from .\build\file.o(.text._ZNK4mbed10FileHandle11is_blockingEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[c7]">mbed::FileHandle::is_blocking() const</a> from .\build\file.o(.text._ZNK4mbed10FileHandle11is_blockingEv) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[c7]">mbed::FileHandle::is_blocking() const</a> from .\build\file.o(.text._ZNK4mbed10FileHandle11is_blockingEv) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[d1]">mbed::FileHandle::poll(short) const</a> from .\build\file.o(.text._ZNK4mbed10FileHandle4pollEs) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[d1]">mbed::FileHandle::poll(short) const</a> from .\build\file.o(.text._ZNK4mbed10FileHandle4pollEs) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[d1]">mbed::FileHandle::poll(short) const</a> from .\build\file.o(.text._ZNK4mbed10FileHandle4pollEs) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[ee]">non-virtual thunk to mbed::Serial::lock()</a> from .\build\serial.o(.text._ZThn348_N4mbed6Serial4lockEv) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[ed]">non-virtual thunk to mbed::Serial::_getc()</a> from .\build\serial.o(.text._ZThn348_N4mbed6Serial5_getcEv) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[ec]">non-virtual thunk to mbed::Serial::_putc(int)</a> from .\build\serial.o(.text._ZThn348_N4mbed6Serial5_putcEi) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[ef]">non-virtual thunk to mbed::Serial::unlock()</a> from .\build\serial.o(.text._ZThn348_N4mbed6Serial6unlockEv) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[e2]">non-virtual thunk to mbed::Serial::~Serial__deallocating()</a> from .\build\serial.o(.text._ZThn348_N4mbed6SerialD0Ev) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[e1]">non-virtual thunk to mbed::Serial::~Serial()</a> from .\build\serial.o(.text._ZThn348_N4mbed6SerialD1Ev) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[f1]">non-virtual thunk to mbed::Serial::~Serial__deallocating()</a> from .\build\serial.o(.text._ZThn352_N4mbed6SerialD0Ev) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[f0]">non-virtual thunk to mbed::Serial::~Serial()</a> from .\build\serial.o(.text._ZThn352_N4mbed6SerialD1Ev) referenced from .\build\serial.o(.rodata._ZTVN4mbed6SerialE)
 <LI><a href="#[f7]">non-virtual thunk to mbed::Stream::~Stream__deallocating()</a> from .\build\stream.o(.text._ZThn4_N4mbed6StreamD0Ev) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[f6]">non-virtual thunk to mbed::Stream::~Stream()</a> from .\build\stream.o(.text._ZThn4_N4mbed6StreamD1Ev) referenced from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[ce]">__cxa_pure_virtual</a> from C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\libcxx\libcppabi_w.l(cxa_virtual.cpp.o)(.text.__cxa_pure_virtual) referenced 4 times from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[ce]">__cxa_pure_virtual</a> from C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\libcxx\libcppabi_w.l(cxa_virtual.cpp.o)(.text.__cxa_pure_virtual) referenced from .\build\timerevent.o(.rodata._ZTVN4mbed10TimerEventE)
 <LI><a href="#[ce]">__cxa_pure_virtual</a> from C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\libcxx\libcppabi_w.l(cxa_virtual.cpp.o)(.text.__cxa_pure_virtual) referenced 2 times from .\build\stream.o(.rodata._ZTVN4mbed6StreamE)
 <LI><a href="#[62]">__main</a> from C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__main.o)(!!!main) referenced from .\build\startup_mk64f12.o(.text)
 <LI><a href="#[8f]">_get_lc_ctype</a> from C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(lc_ctype_c.o)(locale$$code) referenced from C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_ctype_table.o)(.text)
 <LI><a href="#[91]">_printf_input_char</a> from C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text) referenced from C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text)
 <LI><a href="#[90]">_snputc</a> from C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_snputc.o)(.text) referenced from C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(vsnprintf.o)(.text)
 <LI><a href="#[100]">lp_ticker_clear_interrupt</a> from .\build\lp_ticker.o(.text.lp_ticker_clear_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[ff]">lp_ticker_disable_interrupt</a> from .\build\lp_ticker.o(.text.lp_ticker_disable_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[102]">lp_ticker_fire_interrupt</a> from .\build\lp_ticker.o(.text.lp_ticker_fire_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[103]">lp_ticker_free</a> from .\build\lp_ticker.o(.text.lp_ticker_free) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[104]">lp_ticker_get_info</a> from .\build\lp_ticker.o(.text.lp_ticker_get_info) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[fd]">lp_ticker_init</a> from .\build\lp_ticker.o(.text.lp_ticker_init) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[fe]">lp_ticker_read</a> from .\build\lp_ticker.o(.text.lp_ticker_read) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[101]">lp_ticker_set_interrupt</a> from .\build\lp_ticker.o(.text.lp_ticker_set_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[98]">lptmr_isr</a> from .\build\lp_ticker.o(.text.lptmr_isr) referenced 2 times from .\build\lp_ticker.o(.text.lp_ticker_init)
 <LI><a href="#[99]">mbed_start</a> from .\build\mbed_boot.o(.text.mbed_start) referenced 2 times from .\build\mbed_rtos_rtx.o(.text.mbed_rtos_start)
 <LI><a href="#[10b]">note_us_ticker_free</a> from .\build\mbed_us_ticker_api.o(.text.note_us_ticker_free) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[105]">note_us_ticker_init</a> from .\build\mbed_us_ticker_api.o(.text.note_us_ticker_init) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[a7]">osRtxIdleThread</a> from .\build\mbed_rtx_handlers.o(.text.osRtxIdleThread) referenced 2 times from .\build\rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[b3]">osRtxMessageQueuePostProcess</a> from .\build\rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) referenced 2 times from .\build\rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
 <LI><a href="#[b5]">osRtxThreadPostProcess</a> from .\build\rtx_thread.o(.text.osRtxThreadPostProcess) referenced 2 times from .\build\rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[a8]">osRtxTimerThread</a> from .\build\rtx_timer.o(.text.osRtxTimerThread) referenced 2 times from .\build\rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[a9]">osRtxTimerTick</a> from .\build\rtx_timer.o(.text.osRtxTimerTick) referenced 2 times from .\build\rtx_timer.o(.text.osRtxTimerThread)
 <LI><a href="#[b4]">osThreadExit</a> from .\build\rtx_thread.o(.text.osThreadExit) referenced 2 times from .\build\rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[b6]">pit_isr</a> from .\build\us_ticker.o(.text.pit_isr) referenced 2 times from .\build\us_ticker.o(.text.us_ticker_init)
 <LI><a href="#[9a]">svcRtxDelay</a> from .\build\rtx_delay.o(.text.svcRtxDelay) referenced 2 times from .\build\rtx_delay.o(.text.osDelay)
 <LI><a href="#[9b]">svcRtxKernelGetState</a> from .\build\rtx_kernel.o(.text.svcRtxKernelGetState) referenced 2 times from .\build\rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[9c]">svcRtxKernelInitialize</a> from .\build\rtx_kernel.o(.text.svcRtxKernelInitialize) referenced 2 times from .\build\rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[9d]">svcRtxKernelResume</a> from .\build\rtx_kernel.o(.text.svcRtxKernelResume) referenced 2 times from .\build\rtx_kernel.o(.text.osKernelResume)
 <LI><a href="#[9e]">svcRtxKernelStart</a> from .\build\rtx_kernel.o(.text.svcRtxKernelStart) referenced 2 times from .\build\rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[9f]">svcRtxKernelSuspend</a> from .\build\rtx_kernel.o(.text.svcRtxKernelSuspend) referenced 2 times from .\build\rtx_kernel.o(.text.osKernelSuspend)
 <LI><a href="#[a0]">svcRtxMessageQueueGet</a> from .\build\rtx_msgqueue.o(.text.svcRtxMessageQueueGet) referenced 2 times from .\build\rtx_msgqueue.o(.text.osMessageQueueGet)
 <LI><a href="#[a1]">svcRtxMessageQueueNew</a> from .\build\rtx_msgqueue.o(.text.svcRtxMessageQueueNew) referenced 2 times from .\build\rtx_msgqueue.o(.text.osMessageQueueNew)
 <LI><a href="#[a2]">svcRtxMessageQueuePut</a> from .\build\rtx_msgqueue.o(.text.svcRtxMessageQueuePut) referenced 2 times from .\build\rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[a3]">svcRtxMutexAcquire</a> from .\build\rtx_mutex.o(.text.svcRtxMutexAcquire) referenced 2 times from .\build\rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[a4]">svcRtxMutexDelete</a> from .\build\rtx_mutex.o(.text.svcRtxMutexDelete) referenced 2 times from .\build\rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[a5]">svcRtxMutexNew</a> from .\build\rtx_mutex.o(.text.svcRtxMutexNew) referenced 2 times from .\build\rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[a6]">svcRtxMutexRelease</a> from .\build\rtx_mutex.o(.text.svcRtxMutexRelease) referenced 2 times from .\build\rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[aa]">svcRtxThreadExit</a> from .\build\rtx_thread.o(.text.svcRtxThreadExit) referenced 2 times from .\build\rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[ab]">svcRtxThreadGetId</a> from .\build\rtx_thread.o(.text.svcRtxThreadGetId) referenced 2 times from .\build\rtx_thread.o(.text.osThreadGetId)
 <LI><a href="#[ac]">svcRtxThreadNew</a> from .\build\rtx_thread.o(.text.svcRtxThreadNew) referenced 2 times from .\build\rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[10f]">ticker_irq_handler</a> from .\build\mbed_ticker_api.o(.text.ticker_irq_handler) referenced 2 times from .\build\mbed_lp_ticker_api.o(.data.irq_handler)
 <LI><a href="#[ad]">uart0_irq</a> from .\build\serial_api.o(.text.uart0_irq) referenced 2 times from .\build\serial_api.o(.text.serial_irq_set)
 <LI><a href="#[b1]">uart1_irq</a> from .\build\serial_api.o(.text.uart1_irq) referenced 2 times from .\build\serial_api.o(.text.serial_irq_set)
 <LI><a href="#[af]">uart2_irq</a> from .\build\serial_api.o(.text.uart2_irq) referenced 2 times from .\build\serial_api.o(.text.serial_irq_set)
 <LI><a href="#[b0]">uart3_irq</a> from .\build\serial_api.o(.text.uart3_irq) referenced 2 times from .\build\serial_api.o(.text.serial_irq_set)
 <LI><a href="#[ae]">uart4_irq</a> from .\build\serial_api.o(.text.uart4_irq) referenced 2 times from .\build\serial_api.o(.text.serial_irq_set)
 <LI><a href="#[b2]">uart5_irq</a> from .\build\serial_api.o(.text.uart5_irq) referenced 2 times from .\build\serial_api.o(.text.serial_irq_set)
 <LI><a href="#[108]">us_ticker_clear_interrupt</a> from .\build\us_ticker.o(.text.us_ticker_clear_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[107]">us_ticker_disable_interrupt</a> from .\build\us_ticker.o(.text.us_ticker_disable_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[10a]">us_ticker_fire_interrupt</a> from .\build\us_ticker.o(.text.us_ticker_fire_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[10c]">us_ticker_get_info</a> from .\build\us_ticker.o(.text.us_ticker_get_info) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[106]">us_ticker_read</a> from .\build\us_ticker.o(.text.us_ticker_read) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[109]">us_ticker_set_interrupt</a> from .\build\us_ticker.o(.text.us_ticker_set_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[62]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__main.o)(!!!main))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = __main &rArr; __rt_entry &rArr; mbed_init &rArr; mbed_sdk_init &rArr; BOARD_BootClockRUN &rArr; CLOCK_BootToPeeMode &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[115]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[117]"></a>__scatterload_rt2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2aa]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[2ab]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[118]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__scatter_copy.o)(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[2ac]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!handler_null), UNUSED)

<P><STRONG><a name="[2ad]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__scatter_zi.o)(!!handler_zi), UNUSED)

<P><STRONG><a name="[119]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_n.o)(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[164]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_percent.o)(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[11b]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_p.o)(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[11d]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_f.o)(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[11f]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_e.o)(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[120]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_g.o)(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[121]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_a.o)(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[2ae]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_ll.o)(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[123]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_i.o)(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[125]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_d.o)(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[126]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_u.o)(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[127]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_o.o)(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[129]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_x.o)(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[12b]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_lli.o)(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[12d]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_lld.o)(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[12e]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_llu.o)(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[12f]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_llo.o)(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[131]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_llx.o)(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[2af]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_l.o)(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[133]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_c.o)(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[135]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_s.o)(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[137]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_lc.o)(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[139]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_ls.o)(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[2b0]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_percent_end.o)(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[1a7]"></a>$Super$$__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit.o)(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[13b]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[13d]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2b1]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[2b2]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2b3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[2b4]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[2b5]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2b6]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[141]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2b7]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2b8]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[142]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[2b9]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2ba]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2bb]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2bc]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[2bd]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2be]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2bf]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[144]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000026))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(char const*) &rArr; mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::Mutex() &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[2c0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2c1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[146]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000033))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[2c2]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[2c3]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[2c4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[2c5]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\except.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; Fault_Handler &rArr; mbed_fault_handler &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2c6]"></a>__rt_lib_shutdown_heap_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libshutdown2.o)(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2c7]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libshutdown2.o)(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\except.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = MemManage_Handler &rArr; Fault_Handler &rArr; mbed_fault_handler &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\except.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = BusFault_Handler &rArr; Fault_Handler &rArr; mbed_fault_handler &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\except.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[147]"></a>Fault_Handler</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, .\build\except.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Fault_Handler &rArr; mbed_fault_handler &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, .\build\irq_cm4f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_kernel.o(.text.svcRtxKernelStart)
<LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DMA0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DMA1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA9_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA10_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA11_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA12_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA13_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA14_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>I2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2S0_Tx_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2S0_Rx_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>UART0_LON_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>UART0_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UART0_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART1_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UART1_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART2_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART2_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UART3_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>UART3_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART4_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART4_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART5_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART5_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN0_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN0_Bus_Off_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN0_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN0_Tx_Warning_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN0_Rx_Warning_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN0_Wake_Up_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SDHC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA_Error_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>ENET_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>ENET_Error_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>ENET_Receive_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>ENET_Transmit_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>FTFE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>FTM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>LLWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>MCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PDB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>PIT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PIT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PIT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PIT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>PORTB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>PORTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>PORTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Read_Collision_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>Reserved71_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SWI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>UART0_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>UART0_LON_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>UART1_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>UART2_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>UART3_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>UART4_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>UART5_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USBDCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>WDOG_EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[2c8]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(use_no_semi_2.o)(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_ctype_table.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_errno_addr_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, char const*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdopen
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[2c9]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_errno_addr_twolibspace.o)(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_errno_addr_twolibspace.o)(.text), UNUSED)

<P><STRONG><a name="[150]"></a>malloc_internal$concurrent</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_alloc_threads.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr;  EvrRtxMutexError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[152]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_alloc_threads.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr;  EvrRtxMutexError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[154]"></a>free_internal$concurrent</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_free_threads.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr;  EvrRtxMutexError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[155]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_free_threads.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr;  EvrRtxMutexError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::~DirectSerial__deallocating()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[23f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(lludivv7m.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::set_wake_time(unsigned long long)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::update_and_get_tick()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[2cb]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(lludivv7m.o)(.text), UNUSED)

<P><STRONG><a name="[156]"></a>vsnprintf</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(vsnprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vprintf
</UL>

<P><STRONG><a name="[159]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_pad.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[15a]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_pad.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[15b]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_truncate.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[15c]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_truncate.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[158]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_str.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[124]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[15e]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_wctomb.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[160]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[128]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[130]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[161]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[12a]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[132]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[11c]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[162]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__printf_flags_ss_wp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[165]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fseek.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _fseek &rArr; _sys_istty &rArr; mbed::mbed_file_handle(int) &rArr; __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[2cc]"></a>_fseek$unlocked</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fseek.o)(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>_ftell$unlocked</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(ftell.o)(.text), UNUSED)

<P><STRONG><a name="[167]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(ftell.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[16a]"></a>setbuf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(setbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setbuf &rArr; setvbuf &rArr; _mutex_release &rArr; osMutexRelease &rArr;  EvrRtxMutexError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdopen
</UL>

<P><STRONG><a name="[2ce]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fclose.o)(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fclose.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>

<P><STRONG><a name="[170]"></a>fclose</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fclose_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Stream::~Stream()
</UL>

<P><STRONG><a name="[171]"></a>_do_fflush</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fflush_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[172]"></a>fflush</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fflush_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[175]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fopen_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(char const*) &rArr; mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::Mutex() &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[176]"></a>fopen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fopen_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(char const*) &rArr; mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::Mutex() &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdopen
</UL>

<P><STRONG><a name="[177]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(assert.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterTransferFillUpTxFifo
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_DriverIRQHandler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleIRQ
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S0_Rx_DriverIRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S0_Tx_DriverIRQHandler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxHandleIRQ
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxHandleIRQ
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDefaultConfig
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_GetDefaultConfig
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransferHandleIRQ
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferHandleIRQ
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferBlocking
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterGetDefaultConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_DriverIRQHandler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortSend
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadRxMb
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Error_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Receive_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Transmit_IRQHandler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DriverIRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DriverIRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DriverIRQHandler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_SlaveTransferHandleIRQ
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterTransferHandleIRQ
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferHandleIRQ
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudRate
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetDefaultConfig
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[2cf]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(assert.o)(.text), UNUSED)

<P><STRONG><a name="[235]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(strspn.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(char const*)
</UL>

<P><STRONG><a name="[22d]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(memcmp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(char const*, unsigned int)
</UL>

<P><STRONG><a name="[22c]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(strlen.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(char const*, unsigned int)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vprintf
</UL>

<P><STRONG><a name="[282]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memcpy_v6.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[17a]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memcpy_v6.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2d0]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memcpy_v6.o)(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init_direct
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[2d1]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(aeabi_memset4.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[2d4]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(aeabi_memset4.o)(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[2d5]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init_direct
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[2d6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[24f]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(strcmpv7em.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[2d8]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(init_aeabi.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[2db]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libspace.o)(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libspace.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>

<P><STRONG><a name="[2dc]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(use_no_semi.o)(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(use_no_semi.o)(.text), UNUSED)

<P><STRONG><a name="[153]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_heap_descriptor_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[140]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_locale_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[2de]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[151]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr;  EvrRtxMutexError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
</UL>

<P><STRONG><a name="[181]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[13e]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[183]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_init_threads.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2e2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_init_threads.o)(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_intcommon.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[11a]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_charcount.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[18a]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[157]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[90]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_snputc.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[18d]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[134]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[136]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[18e]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[138]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[13a]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[12c]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_longlong_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[18f]"></a>__flsbuf</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(flsbuf.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[2a9]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(flsbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>

<P><STRONG><a name="[2e3]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(flsbuf.o)(.text), UNUSED)

<P><STRONG><a name="[169]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[191]"></a>_writebuf</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[16d]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[190]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(stdio.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[16b]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(setvbuf_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setvbuf &rArr; _mutex_release &rArr; osMutexRelease &rArr;  EvrRtxMutexError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
</UL>

<P><STRONG><a name="[145]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(initio_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(char const*) &rArr; mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::Mutex() &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[195]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(initio_locked.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[196]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_c16rtomb.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[15f]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_c16rtomb.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[179]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(abort.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[2e4]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(maybetermalloc2.o)(.text), UNUSED)

<P><STRONG><a name="[180]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_extend_threads.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr;  EvrRtxMutexError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignUpOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[189]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(lludiv10.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19a]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_fp_hex.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[18c]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_fp_infnan.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[185]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(bigflt0.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19b]"></a>fputs</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fputs_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fputs &rArr; _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[19d]"></a>puts</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(puts_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = puts &rArr; _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[197]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_abrt_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[194]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_rtred_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[182]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_rtmem_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[178]"></a>__assert_puts</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(assert_stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1a2]"></a>_terminate_alloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(term_alloc.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>

<P><STRONG><a name="[19f]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_exit.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[19e]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_abrt_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[1a0]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_rtred_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[1a1]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_rtmem_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1a3]"></a>__Heap_Finalize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_final_threads.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[1a4]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_general.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[1a6]"></a>__rt_lib_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text.$Sub$$__rt_lib_init))
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$__rt_lib_init
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_toolchain_init
</UL>

<P><STRONG><a name="[1a8]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, .\build\fsl_clock_config.o(.text.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_BootToPeeMode &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitOsc0
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetInternalRefClkConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetSimConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[89]"></a>CAN0_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, .\build\fsl_flexcan.o(.text.CAN0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = CAN0_DriverIRQHandler &rArr; FLEXCAN_TransferHandleIRQ &rArr; FLEXCAN_TransferAbortSend &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[1aa]"></a>CLOCK_BootToPeeMode</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, .\build\fsl_clock.o(.text.CLOCK_BootToPeeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = CLOCK_BootToPeeMode &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1af]"></a>CLOCK_GetFreq</STRONG> (Thumb, 506 bytes, Stack size 8 bytes, .\build\fsl_clock.o(.text.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetPll0Freq &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init_direct
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init_direct
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>

<P><STRONG><a name="[1b0]"></a>CLOCK_GetOutClkFreq</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, .\build\fsl_clock.o(.text.CLOCK_GetOutClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = CLOCK_GetOutClkFreq &rArr; CLOCK_GetPll0Freq &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[1b1]"></a>CLOCK_GetPll0Freq</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, .\build\fsl_clock.o(.text.CLOCK_GetPll0Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = CLOCK_GetPll0Freq &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
</UL>

<P><STRONG><a name="[1a9]"></a>CLOCK_InitOsc0</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, .\build\fsl_clock.o(.text.CLOCK_InitOsc0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_InitOsc0
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1ab]"></a>CLOCK_SetInternalRefClkConfig</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, .\build\fsl_clock.o(.text.CLOCK_SetInternalRefClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetInternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1ac]"></a>CLOCK_SetSimConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, .\build\fsl_clock.o(.text.CLOCK_SetSimConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[63]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\fsl_edma.o(.text.DMA0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = DMA0_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>DMA10_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\fsl_edma.o(.text.DMA10_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = DMA10_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>DMA11_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\fsl_edma.o(.text.DMA11_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = DMA11_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>DMA12_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\fsl_edma.o(.text.DMA12_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = DMA12_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>DMA13_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\fsl_edma.o(.text.DMA13_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = DMA13_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>DMA14_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\fsl_edma.o(.text.DMA14_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = DMA14_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>DMA15_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\fsl_edma.o(.text.DMA15_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = DMA15_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>DMA1_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\fsl_edma.o(.text.DMA1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = DMA1_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\fsl_edma.o(.text.DMA2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = DMA2_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>DMA3_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\fsl_edma.o(.text.DMA3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = DMA3_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>DMA4_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\fsl_edma.o(.text.DMA4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = DMA4_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>DMA5_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\fsl_edma.o(.text.DMA5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = DMA5_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>DMA6_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\fsl_edma.o(.text.DMA6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = DMA6_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>DMA7_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\fsl_edma.o(.text.DMA7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = DMA7_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>DMA8_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\fsl_edma.o(.text.DMA8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = DMA8_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>DMA9_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\fsl_edma.o(.text.DMA9_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = DMA9_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[1b4]"></a>DSPI_MasterTransferHandleIRQ</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, .\build\fsl_dspi.o(.text.DSPI_MasterTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = DSPI_MasterTransferHandleIRQ &rArr; DSPI_MasterTransferFillUpTxFifo &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterTransferFillUpTxFifo
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DriverIRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DriverIRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DriverIRQHandler
</UL>

<P><STRONG><a name="[1b5]"></a>DSPI_SlaveTransferHandleIRQ</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, .\build\fsl_dspi.o(.text.DSPI_SlaveTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = DSPI_SlaveTransferHandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DriverIRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DriverIRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DriverIRQHandler
</UL>

<P><STRONG><a name="[1b2]"></a>EDMA_HandleIRQ</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, .\build\fsl_edma.o(.text.EDMA_HandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_DriverIRQHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_DriverIRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_DriverIRQHandler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_DriverIRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_DriverIRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_DriverIRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_DriverIRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_DriverIRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_DriverIRQHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_DriverIRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_DriverIRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_DriverIRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DriverIRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DriverIRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DriverIRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DriverIRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>ENET_Error_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, .\build\fsl_enet.o(.text.ENET_Error_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = ENET_Error_IRQHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>ENET_Receive_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, .\build\fsl_enet.o(.text.ENET_Receive_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = ENET_Receive_IRQHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>ENET_Transmit_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, .\build\fsl_enet.o(.text.ENET_Transmit_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = ENET_Transmit_IRQHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[27f]"></a>EvrRtxDelayError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxDelayError))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[1b6]"></a>EvrRtxKernelError</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxKernelError))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_get_error_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelResume
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSuspend
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelSuspend
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[1ba]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxMessageQueueError))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_get_error_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[1bb]"></a>EvrRtxMutexError</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxMutexError))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_get_error_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[1bc]"></a>EvrRtxThreadError</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxThreadError))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = EvrRtxThreadError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_get_error_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[1bd]"></a>EvrRtxThreadExit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxThreadExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[1bf]"></a>FLEXCAN_ReadRxMb</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, .\build\fsl_flexcan.o(.text.FLEXCAN_ReadRxMb))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_ReadRxMb &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[1c0]"></a>FLEXCAN_TransferAbortSend</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, .\build\fsl_flexcan.o(.text.FLEXCAN_TransferAbortSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_TransferAbortSend &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[1ad]"></a>FLEXCAN_TransferHandleIRQ</STRONG> (Thumb, 524 bytes, Stack size 48 bytes, .\build\fsl_flexcan.o(.text.FLEXCAN_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_TransferHandleIRQ &rArr; FLEXCAN_TransferAbortSend &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortSend
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadRxMb
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_DriverIRQHandler
</UL>

<P><STRONG><a name="[74]"></a>I2C0_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, .\build\fsl_i2c.o(.text.I2C0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = I2C0_DriverIRQHandler &rArr; I2C_SlaveTransferHandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransferHandleIRQ
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>I2C1_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, .\build\fsl_i2c.o(.text.I2C1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = I2C1_DriverIRQHandler &rArr; I2C_SlaveTransferHandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransferHandleIRQ
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>I2C2_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, .\build\fsl_i2c.o(.text.I2C2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = I2C2_DriverIRQHandler &rArr; I2C_SlaveTransferHandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransferHandleIRQ
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[263]"></a>I2C_EnableInterrupts</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\fsl_i2c.o(.text.I2C_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init_direct
</UL>

<P><STRONG><a name="[1c3]"></a>I2C_MasterGetDefaultConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, .\build\fsl_i2c.o(.text.I2C_MasterGetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = I2C_MasterGetDefaultConfig &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init_direct
</UL>

<P><STRONG><a name="[1c4]"></a>I2C_MasterInit</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, .\build\fsl_i2c.o(.text.I2C_MasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = I2C_MasterInit &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init_direct
</UL>

<P><STRONG><a name="[1c8]"></a>I2C_MasterReadBlocking</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, .\build\fsl_i2c.o(.text.I2C_MasterReadBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_MasterReadBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1c6]"></a>I2C_MasterRepeatedStart</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, .\build\fsl_i2c.o(.text.I2C_MasterRepeatedStart))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferHandleIRQ
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferBlocking
</UL>

<P><STRONG><a name="[25e]"></a>I2C_MasterSetBaudRate</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, .\build\fsl_i2c.o(.text.I2C_MasterSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_MasterSetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
</UL>

<P><STRONG><a name="[264]"></a>I2C_MasterStart</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, .\build\fsl_i2c.o(.text.I2C_MasterStart))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
</UL>

<P><STRONG><a name="[265]"></a>I2C_MasterStop</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\fsl_i2c.o(.text.I2C_MasterStop))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
</UL>

<P><STRONG><a name="[1c5]"></a>I2C_MasterTransferBlocking</STRONG> (Thumb, 542 bytes, Stack size 16 bytes, .\build\fsl_i2c.o(.text.I2C_MasterTransferBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = I2C_MasterTransferBlocking &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReadBlocking
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWriteBlocking
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRepeatedStart
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
</UL>

<P><STRONG><a name="[1c1]"></a>I2C_MasterTransferHandleIRQ</STRONG> (Thumb, 544 bytes, Stack size 24 bytes, .\build\fsl_i2c.o(.text.I2C_MasterTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = I2C_MasterTransferHandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRepeatedStart
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_DriverIRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_DriverIRQHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_DriverIRQHandler
</UL>

<P><STRONG><a name="[1c7]"></a>I2C_MasterWriteBlocking</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, .\build\fsl_i2c.o(.text.I2C_MasterWriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_MasterWriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1c2]"></a>I2C_SlaveTransferHandleIRQ</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, .\build\fsl_i2c.o(.text.I2C_SlaveTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = I2C_SlaveTransferHandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_DriverIRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_DriverIRQHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_DriverIRQHandler
</UL>

<P><STRONG><a name="[79]"></a>I2S0_Rx_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, .\build\fsl_sai.o(.text.I2S0_Rx_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = I2S0_Rx_DriverIRQHandler &rArr; SAI_TransferRxHandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxHandleIRQ
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>I2S0_Tx_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, .\build\fsl_sai.o(.text.I2S0_Tx_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = I2S0_Tx_DriverIRQHandler &rArr; SAI_TransferTxHandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxHandleIRQ
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[1cb]"></a>LPTMR_GetDefaultConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, .\build\fsl_lptmr.o(.text.LPTMR_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = LPTMR_GetDefaultConfig &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
</UL>

<P><STRONG><a name="[1cc]"></a>LPTMR_Init</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, .\build\fsl_lptmr.o(.text.LPTMR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = LPTMR_Init &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, .\build\mbed_overrides.o(.text.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NMI_Handler &rArr; gpio_init_in &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[1ce]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\mbed_rtx_idle.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::acknowledge_tick()
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1d0]"></a>OS_Tick_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\mbed_rtx_idle.o(.text.OS_Tick_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OS_Tick_Disable &rArr; mbed::internal::SysTimer&lang;1000u, true&rang;::cancel_tick() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::cancel_tick()
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelSuspend
</UL>

<P><STRONG><a name="[1d2]"></a>OS_Tick_Enable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mbed_rtx_idle.o(.text.OS_Tick_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = OS_Tick_Enable &rArr; mbed::internal::init_os_timer() &rArr; mbed::internal::SysTimer&lang;1000u, true&rang;::SysTimer(ticker_data_t const*) &rArr; mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*) &rArr; ticker_set_handler &rArr; initialize &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::init_os_timer()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::start_tick()
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelResume
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1d5]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_rtx_idle.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_Tick_GetIRQn
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::get_irq_number()
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1d7]"></a>OS_Tick_Setup</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, .\build\mbed_rtx_idle.o(.text.OS_Tick_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_Tick_Setup &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::get_irq_number()
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1d9]"></a>PIT_Init</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, .\build\fsl_pit.o(.text.PIT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = PIT_Init &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>

<P><STRONG><a name="[1da]"></a>RTC_GetDefaultConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, .\build\fsl_rtc.o(.text.RTC_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = RTC_GetDefaultConfig &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[1db]"></a>RTC_Init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, .\build\fsl_rtc.o(.text.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = RTC_Init &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[1c9]"></a>SAI_TransferRxHandleIRQ</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, .\build\fsl_sai.o(.text.SAI_TransferRxHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = SAI_TransferRxHandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S0_Rx_DriverIRQHandler
</UL>

<P><STRONG><a name="[1ca]"></a>SAI_TransferTxHandleIRQ</STRONG> (Thumb, 394 bytes, Stack size 48 bytes, .\build\fsl_sai.o(.text.SAI_TransferTxHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = SAI_TransferTxHandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S0_Tx_DriverIRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>SDHC_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, .\build\fsl_sdhc.o(.text.SDHC_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = SDHC_DriverIRQHandler &rArr; SDHC_TransferHandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_TransferHandleIRQ
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[1dc]"></a>SDHC_TransferHandleIRQ</STRONG> (Thumb, 500 bytes, Stack size 24 bytes, .\build\fsl_sdhc.o(.text.SDHC_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = SDHC_TransferHandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDHC_DriverIRQHandler
</UL>

<P><STRONG><a name="[25d]"></a>SMC_SetPowerModeWait</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\fsl_smc.o(.text.SMC_SetPowerModeWait))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
</UL>

<P><STRONG><a name="[76]"></a>SPI0_DriverIRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, .\build\fsl_dspi.o(.text.SPI0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = SPI0_DriverIRQHandler &rArr; DSPI_MasterTransferHandleIRQ &rArr; DSPI_MasterTransferFillUpTxFifo &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_SlaveTransferHandleIRQ
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterTransferHandleIRQ
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>SPI1_DriverIRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, .\build\fsl_dspi.o(.text.SPI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = SPI1_DriverIRQHandler &rArr; DSPI_MasterTransferHandleIRQ &rArr; DSPI_MasterTransferFillUpTxFifo &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_SlaveTransferHandleIRQ
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterTransferHandleIRQ
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>SPI2_DriverIRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, .\build\fsl_dspi.o(.text.SPI2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = SPI2_DriverIRQHandler &rArr; DSPI_MasterTransferHandleIRQ &rArr; DSPI_MasterTransferFillUpTxFifo &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_SlaveTransferHandleIRQ
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterTransferHandleIRQ
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>SystemInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, .\build\system_mk64f12.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>UART0_RX_TX_DriverIRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\fsl_uart.o(.text.UART0_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = UART0_RX_TX_DriverIRQHandler &rArr; UART_TransferHandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>UART1_RX_TX_DriverIRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\fsl_uart.o(.text.UART1_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = UART1_RX_TX_DriverIRQHandler &rArr; UART_TransferHandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>UART2_RX_TX_DriverIRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\fsl_uart.o(.text.UART2_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = UART2_RX_TX_DriverIRQHandler &rArr; UART_TransferHandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>UART3_RX_TX_DriverIRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\fsl_uart.o(.text.UART3_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = UART3_RX_TX_DriverIRQHandler &rArr; UART_TransferHandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>UART4_RX_TX_DriverIRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\fsl_uart.o(.text.UART4_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = UART4_RX_TX_DriverIRQHandler &rArr; UART_TransferHandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>UART5_RX_TX_DriverIRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\fsl_uart.o(.text.UART5_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = UART5_RX_TX_DriverIRQHandler &rArr; UART_TransferHandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[299]"></a>UART_ClearStatusFlags</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, .\build\fsl_uart.o(.text.UART_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>

<P><STRONG><a name="[29b]"></a>UART_DisableInterrupts</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, .\build\fsl_uart.o(.text.UART_DisableInterrupts), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[29a]"></a>UART_EnableInterrupts</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, .\build\fsl_uart.o(.text.UART_EnableInterrupts), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[1de]"></a>UART_GetDefaultConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, .\build\fsl_uart.o(.text.UART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = UART_GetDefaultConfig &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init_direct
</UL>

<P><STRONG><a name="[29c]"></a>UART_GetEnabledInterrupts</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\fsl_uart.o(.text.UART_GetEnabledInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_irq
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_irq
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_irq
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_irq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_irq
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_irq
</UL>

<P><STRONG><a name="[298]"></a>UART_GetStatusFlags</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\fsl_uart.o(.text.UART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>

<P><STRONG><a name="[1df]"></a>UART_Init</STRONG> (Thumb, 572 bytes, Stack size 24 bytes, .\build\fsl_uart.o(.text.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = UART_Init &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init_direct
</UL>

<P><STRONG><a name="[1e0]"></a>UART_SetBaudRate</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, .\build\fsl_uart.o(.text.UART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = UART_SetBaudRate &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[1dd]"></a>UART_TransferHandleIRQ</STRONG> (Thumb, 856 bytes, Stack size 24 bytes, .\build\fsl_uart.o(.text.UART_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = UART_TransferHandleIRQ &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_RX_TX_DriverIRQHandler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RX_TX_DriverIRQHandler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_RX_TX_DriverIRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_RX_TX_DriverIRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_DriverIRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[208]"></a>CThunkBase::cthunk_free(void (*)())</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\cthunkbase.o(.text._ZN10CThunkBase11cthunk_freeEPFvvE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
</UL>

<P><STRONG><a name="[1e2]"></a>DigitDisplay::DigitDisplay(PinName, PinName)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, .\build\digitdisplay.o(.text._ZN12DigitDisplayC2E7PinNameS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DigitDisplay::DigitDisplay(PinName, PinName) &rArr; gpio_init_in &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::output()
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[2e5]"></a>DigitDisplay::DigitDisplay__sub_object(PinName, PinName)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, .\build\digitdisplay.o(.text._ZN12DigitDisplayC2E7PinNameS0_), UNUSED)

<P><STRONG><a name="[b9]"></a>DirectSerial::read(void*, unsigned int)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerial4readEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DirectSerial::read(void*, unsigned int) &rArr; serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[bb]"></a>DirectSerial::seek(long, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerial4seekEli))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[c1]"></a>DirectSerial::size()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerial4sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[bc]"></a>DirectSerial::close()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerial5closeEv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[ba]"></a>DirectSerial::write(void const*, unsigned int)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerial5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DirectSerial::write(void const*, unsigned int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[be]"></a>DirectSerial::isatty()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerial6isattyEv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[1f3]"></a>DirectSerial::DirectSerial(serial_pinmap_t const&, int)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerialC2ERK15serial_pinmap_ti), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init_direct
</UL>

<P><STRONG><a name="[218]"></a>DirectSerial::DirectSerial__sub_object(serial_pinmap_t const&, int)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerialC2ERK15serial_pinmap_ti))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DirectSerial::DirectSerial__sub_object(serial_pinmap_t const&, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b8]"></a>DirectSerial::~DirectSerial__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerialD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DirectSerial::~DirectSerial__deallocating() &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr;  EvrRtxMutexError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[cc]"></a>Grove_LCD_RGB_Backlight::write(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\grove_lcd_rgb_backlight.o(.text._ZN23Grove_LCD_RGB_Backlight5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = Grove_LCD_RGB_Backlight::write(unsigned char) &rArr; mbed::I2C::write(int, char const*, int, bool) &rArr; i2c_write &rArr; I2C_MasterTransferBlocking &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, char const*, int, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> grove_lcd_rgb_backlight.o(.rodata._ZTV23Grove_LCD_RGB_Backlight)
</UL>
<P><STRONG><a name="[1e1]"></a>Grove_LCD_RGB_Backlight::Grove_LCD_RGB_Backlight(PinName, PinName)</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, .\build\grove_lcd_rgb_backlight.o(.text._ZN23Grove_LCD_RGB_BacklightC2E7PinNameS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = Grove_LCD_RGB_Backlight::Grove_LCD_RGB_Backlight(PinName, PinName) &rArr; mbed::I2C::I2C(PinName, PinName) &rArr; i2c_init &rArr; i2c_init_direct &rArr; I2C_MasterInit &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_us_generic
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_us_ticks
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, char const*, int, bool)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[2e6]"></a>Grove_LCD_RGB_Backlight::Grove_LCD_RGB_Backlight__sub_object(PinName, PinName)</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, .\build\grove_lcd_rgb_backlight.o(.text._ZN23Grove_LCD_RGB_BacklightC2E7PinNameS0_), UNUSED)

<P><STRONG><a name="[c8]"></a>mbed::FileHandle::enable_input(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\file.o(.text._ZN4mbed10FileHandle12enable_inputEb))
<BR>[Address Reference Count : 4]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
<LI> serial.o(.rodata._ZTVN4mbed6SerialE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[c6]"></a>mbed::FileHandle::set_blocking(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\file.o(.text._ZN4mbed10FileHandle12set_blockingEb))
<BR>[Address Reference Count : 4]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
<LI> serial.o(.rodata._ZTVN4mbed6SerialE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[c9]"></a>mbed::FileHandle::enable_output(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\file.o(.text._ZN4mbed10FileHandle13enable_outputEb))
<BR>[Address Reference Count : 4]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
<LI> serial.o(.rodata._ZTVN4mbed6SerialE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[c5]"></a>mbed::FileHandle::flen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\file.o(.text._ZN4mbed10FileHandle4flenEv))
<BR>[Address Reference Count : 4]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
<LI> serial.o(.rodata._ZTVN4mbed6SerialE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[d0]"></a>mbed::FileHandle::size()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandle4sizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FileHandle::size()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[bd]"></a>mbed::FileHandle::sync()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandle4syncEv))
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[bf]"></a>mbed::FileHandle::tell()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandle4tellEv))
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[c4]"></a>mbed::FileHandle::fsync()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\file.o(.text._ZN4mbed10FileHandle5fsyncEv))
<BR>[Address Reference Count : 4]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
<LI> serial.o(.rodata._ZTVN4mbed6SerialE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[c3]"></a>mbed::FileHandle::lseek(long, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\file.o(.text._ZN4mbed10FileHandle5lseekEli))
<BR>[Address Reference Count : 4]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
<LI> serial.o(.rodata._ZTVN4mbed6SerialE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[cb]"></a>mbed::FileHandle::sigio(mbed::Callback&lang;void ()&rang;)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\file.o(.text._ZN4mbed10FileHandle5sigioENS_8CallbackIFvvEEE))
<BR>[Address Reference Count : 4]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
<LI> serial.o(.rodata._ZTVN4mbed6SerialE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[cf]"></a>mbed::FileHandle::isatty()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandle6isattyEv))
<BR>[Address Reference Count : 1]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[c0]"></a>mbed::FileHandle::rewind()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandle6rewindEv))
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[c2]"></a>mbed::FileHandle::truncate(long)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandle8truncateEl))
<BR>[Address Reference Count : 4]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
<LI> serial.o(.rodata._ZTVN4mbed6SerialE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[cd]"></a>mbed::FileHandle::~FileHandle__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandleD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[b7]"></a>mbed::FileHandle::~FileHandle__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandleD2Ev))
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[1fb]"></a>mbed::SerialBase::_base_getc()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBase10_base_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::SerialBase::_base_getc() &rArr; serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Serial::_getc()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_getc()
</UL>

<P><STRONG><a name="[1fc]"></a>mbed::SerialBase::_base_putc(int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBase10_base_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Serial::_putc(int)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_putc(int)
</UL>

<P><STRONG><a name="[94]"></a>mbed::SerialBase::_irq_handler(unsigned int, SerialIrq)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq))
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.text._ZN4mbed10SerialBase5_initEv)
</UL>
<P><STRONG><a name="[d2]"></a>mbed::SerialBase::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBase4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.rodata._ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[95]"></a>mbed::SerialBase::_init()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBase5_initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::_init() &rArr; serial_init &rArr; serial_init_direct &rArr; UART_Init &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.text._ZN4mbed10SerialBaseC2E7PinNameS1_i)
</UL>
<P><STRONG><a name="[1ff]"></a>mbed::SerialBase::attach(mbed::Callback&lang;void ()&rang;, mbed::SerialBase::IrqType)</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
</UL>

<P><STRONG><a name="[d3]"></a>mbed::SerialBase::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBase6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.rodata._ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[205]"></a>mbed::SerialBase::SerialBase(PinName, PinName, int)</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBaseC2E7PinNameS1_i), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[224]"></a>mbed::SerialBase::SerialBase__sub_object(PinName, PinName, int)</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBaseC2E7PinNameS1_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::SerialBase::SerialBase__sub_object(PinName, PinName, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, char const*, int)
</UL>

<P><STRONG><a name="[d5]"></a>mbed::SerialBase::~SerialBase__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBaseD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::SerialBase::~SerialBase__deallocating() &rArr; operator delete(void*, unsigned int) &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr;  EvrRtxMutexError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.rodata._ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[207]"></a>mbed::SerialBase::~SerialBase()</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBaseD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CThunkBase::cthunk_free(void (*)())
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void ()&rang;, mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[d4]"></a>mbed::SerialBase::~SerialBase__sub_object()</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, .\build\serialbase.o(.text._ZN4mbed10SerialBaseD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::SerialBase::~SerialBase__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial__sub_object()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase__deallocating()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Serial::~Serial__deallocating()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Serial::~Serial()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Serial::~Serial__deallocating()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Serial::~Serial()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.rodata._ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[209]"></a>mbed::TimerEvent::insert_absolute(unsigned long long)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEvent15insert_absoluteEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::set_wake_time(unsigned long long)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::start_tick()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::handler()
</UL>

<P><STRONG><a name="[97]"></a>mbed::TimerEvent::irq(unsigned int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEvent3irqEj))
<BR>[Address Reference Count : 1]<UL><LI> timerevent.o(.text._ZN4mbed10TimerEventC2EPK13ticker_data_t)
</UL>
<P><STRONG><a name="[20b]"></a>mbed::TimerEvent::remove()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEvent6removeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::cancel_wake()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::cancel_tick()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::~SysTimer()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::~SysTimer__deallocating()
</UL>

<P><STRONG><a name="[20d]"></a>mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEventC2EPK13ticker_data_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*) &rArr; ticker_set_handler &rArr; initialize &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::SysTimer(ticker_data_t const*)
</UL>

<P><STRONG><a name="[d7]"></a>mbed::TimerEvent::~TimerEvent__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEventD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> timerevent.o(.rodata._ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[20f]"></a>mbed::TimerEvent::~TimerEvent()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEventD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
</UL>

<P><STRONG><a name="[d6]"></a>mbed::TimerEvent::~TimerEvent__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEventD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::TimerEvent::~TimerEvent__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::~SysTimer()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::~SysTimer__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerevent.o(.rodata._ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[210]"></a>mbed::DigitalInOut::mode(PinMode)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\digitalinout.o(.text._ZN4mbed12DigitalInOut4modeE7PinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::DigitalInOut::mode(PinMode) &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::recover(PinName, PinName)
</UL>

<P><STRONG><a name="[212]"></a>mbed::DigitalInOut::input()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\digitalinout.o(.text._ZN4mbed12DigitalInOut5inputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::DigitalInOut::input() &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::recover(PinName, PinName)
</UL>

<P><STRONG><a name="[1ef]"></a>mbed::DigitalInOut::output()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\digitalinout.o(.text._ZN4mbed12DigitalInOut6outputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::DigitalInOut::output() &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitDisplay::DigitDisplay(PinName, PinName)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::recover(PinName, PinName)
</UL>

<P><STRONG><a name="[214]"></a>mbed::mbed_file_handle(int)</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text._ZN4mbed16mbed_file_handleEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::mbed_file_handle(int) &rArr; __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_override_console(int)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_target_override_console(int)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial__sub_object(serial_pinmap_t const&, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdopen
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>

<P><STRONG><a name="[21a]"></a>mbed::remove_filehandle(mbed::FileHandle*)</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(.text._ZN4mbed17remove_filehandleEPNS_10FileHandleE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>

<P><STRONG><a name="[21b]"></a>mbed::CriticalSectionLock::CriticalSectionLock()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\criticalsectionlock.o(.text._ZN4mbed19CriticalSectionLockC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::CriticalSectionLock::CriticalSectionLock() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)
</UL>

<P><STRONG><a name="[2e7]"></a>mbed::CriticalSectionLock::CriticalSectionLock__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\criticalsectionlock.o(.text._ZN4mbed19CriticalSectionLockC2Ev), UNUSED)

<P><STRONG><a name="[21c]"></a>mbed::CriticalSectionLock::~CriticalSectionLock()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\criticalsectionlock.o(.text._ZN4mbed19CriticalSectionLockD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::CriticalSectionLock::~CriticalSectionLock() &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)
</UL>

<P><STRONG><a name="[2e8]"></a>mbed::CriticalSectionLock::~CriticalSectionLock__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\criticalsectionlock.o(.text._ZN4mbed19CriticalSectionLockD2Ev), UNUSED)

<P><STRONG><a name="[215]"></a>mbed::mbed_override_console(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZN4mbed21mbed_override_consoleEi))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[21d]"></a>mbed::mbed_set_unbuffered_stream(std::__FILE*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZN4mbed26mbed_set_unbuffered_streamEPSt6__FILE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::mbed_set_unbuffered_stream(std::__FILE*) &rArr; setbuf &rArr; setvbuf &rArr; _mutex_release &rArr; osMutexRelease &rArr;  EvrRtxMutexError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(char const*)
</UL>

<P><STRONG><a name="[216]"></a>mbed::mbed_target_override_console(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZN4mbed28mbed_target_override_consoleEi))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[d8]"></a>mbed::I2C::lock()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, .\build\i2c.o(.text._ZN4mbed3I2C4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::lock() &rArr; rtos::Mutex::Mutex() &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.rodata._ZTVN4mbed3I2CE)
</UL>
<P><STRONG><a name="[1f6]"></a>mbed::I2C::write(int, char const*, int, bool)</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, .\build\i2c.o(.text._ZN4mbed3I2C5writeEiPKcib))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::write(int, char const*, int, bool) &rArr; i2c_write &rArr; I2C_MasterTransferBlocking &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grove_LCD_RGB_Backlight::Grove_LCD_RGB_Backlight(PinName, PinName)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grove_LCD_RGB_Backlight::write(unsigned char)
</UL>

<P><STRONG><a name="[d9]"></a>mbed::I2C::unlock()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, .\build\i2c.o(.text._ZN4mbed3I2C6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::unlock() &rArr; rtos::Mutex::Mutex() &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.rodata._ZTVN4mbed3I2CE)
</UL>
<P><STRONG><a name="[220]"></a>mbed::I2C::recover(PinName, PinName)</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, .\build\i2c.o(.text._ZN4mbed3I2C7recoverE7PinNameS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::recover(PinName, PinName) &rArr; _wait_us_generic &rArr; ticker_read &rArr; initialize &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_inout
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_us_generic
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_us_ticks
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::input()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::output()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::mode(PinMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
</UL>

<P><STRONG><a name="[1f7]"></a>mbed::I2C::I2C(PinName, PinName)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, .\build\i2c.o(.text._ZN4mbed3I2CC2E7PinNameS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::I2C(PinName, PinName) &rArr; i2c_init &rArr; i2c_init_direct &rArr; I2C_MasterInit &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::recover(PinName, PinName)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::lock()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grove_LCD_RGB_Backlight::Grove_LCD_RGB_Backlight(PinName, PinName)
</UL>

<P><STRONG><a name="[2e9]"></a>mbed::I2C::I2C__sub_object(PinName, PinName)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, .\build\i2c.o(.text._ZN4mbed3I2CC2E7PinNameS1_), UNUSED)

<P><STRONG><a name="[db]"></a>mbed::I2C::~I2C__deallocating()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\i2c.o(.text._ZN4mbed3I2CD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::I2C::~I2C__deallocating() &rArr; operator delete(void*, unsigned int) &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr;  EvrRtxMutexError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.rodata._ZTVN4mbed3I2CE)
</UL>
<P><STRONG><a name="[da]"></a>mbed::I2C::~I2C__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\i2c.o(.text._ZN4mbed3I2CD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.rodata._ZTVN4mbed3I2CE)
</UL>
<P><STRONG><a name="[dc]"></a>mbed::Serial::lock()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\serial.o(.text._ZN4mbed6Serial4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::lock() &rArr; rtos::Mutex::lock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[df]"></a>mbed::Serial::_getc()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\serial.o(.text._ZN4mbed6Serial5_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::Serial::_getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[e0]"></a>mbed::Serial::_putc(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\serial.o(.text._ZN4mbed6Serial5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::Serial::_putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[dd]"></a>mbed::Serial::unlock()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\serial.o(.text._ZN4mbed6Serial6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::unlock() &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[1e3]"></a>mbed::Serial::Serial(PinName, PinName, char const*, int)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\build\serial.o(.text._ZN4mbed6SerialC2E7PinNameS1_PKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::Serial(PinName, PinName, char const*, int) &rArr; mbed::Stream::Stream__sub_object(char const*) &rArr; mbed::fdopen(mbed::FileHandle*, char const*) &rArr; fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(char const*) &rArr; mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::Mutex() &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase__sub_object(PinName, PinName, int)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[2ea]"></a>mbed::Serial::Serial__sub_object(PinName, PinName, char const*, int)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\build\serial.o(.text._ZN4mbed6SerialC2E7PinNameS1_PKci), UNUSED)

<P><STRONG><a name="[de]"></a>mbed::Serial::~Serial__deallocating()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\serial.o(.text._ZN4mbed6SerialD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::~Serial__deallocating() &rArr; rtos::Mutex::~Mutex() &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase__sub_object()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[92]"></a>mbed::Serial::~Serial__sub_object()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\main.o(.text._ZN4mbed6SerialD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::~Serial__sub_object() &rArr; rtos::Mutex::~Mutex() &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase__sub_object()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text._GLOBAL__sub_I_main.cpp)
<LI> serial.o(.rodata._ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[f4]"></a>mbed::Stream::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stream.o(.text._ZN4mbed6Stream4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[e3]"></a>mbed::Stream::read(void*, unsigned int)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, .\build\stream.o(.text._ZN4mbed6Stream4readEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::read(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[e5]"></a>mbed::Stream::seek(long, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\stream.o(.text._ZN4mbed6Stream4seekEli))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[eb]"></a>mbed::Stream::size()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\stream.o(.text._ZN4mbed6Stream4sizeEv))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[e7]"></a>mbed::Stream::sync()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\stream.o(.text._ZN4mbed6Stream4syncEv))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[e9]"></a>mbed::Stream::tell()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\stream.o(.text._ZN4mbed6Stream4tellEv))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[e6]"></a>mbed::Stream::close()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\stream.o(.text._ZN4mbed6Stream5closeEv))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[e4]"></a>mbed::Stream::write(void const*, unsigned int)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, .\build\stream.o(.text._ZN4mbed6Stream5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::write(void const*, unsigned int)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[e8]"></a>mbed::Stream::isatty()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\stream.o(.text._ZN4mbed6Stream6isattyEv))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[ea]"></a>mbed::Stream::rewind()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stream.o(.text._ZN4mbed6Stream6rewindEv))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[f5]"></a>mbed::Stream::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stream.o(.text._ZN4mbed6Stream6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[225]"></a>mbed::Stream::Stream__sub_object(char const*)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, .\build\stream.o(.text._ZN4mbed6StreamC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::Stream__sub_object(char const*) &rArr; mbed::fdopen(mbed::FileHandle*, char const*) &rArr; fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(char const*) &rArr; mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::Mutex() &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase__sub_object(char const*, mbed::PathType)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, char const*)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, char const*, int)
</UL>

<P><STRONG><a name="[f3]"></a>mbed::Stream::~Stream__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stream.o(.text._ZN4mbed6StreamD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[229]"></a>mbed::Stream::~Stream()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\stream.o(.text._ZN4mbed6StreamD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase__sub_object()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>

<P><STRONG><a name="[f2]"></a>mbed::Stream::~Stream__sub_object()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\stream.o(.text._ZN4mbed6StreamD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial__sub_object()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Serial::~Serial__deallocating()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Serial::~Serial()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Serial::~Serial__deallocating()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Serial::~Serial()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[228]"></a>mbed::fdopen(mbed::FileHandle*, char const*)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(.text._ZN4mbed6fdopenEPNS_10FileHandleEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = mbed::fdopen(mbed::FileHandle*, char const*) &rArr; fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(char const*) &rArr; mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::Mutex() &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdopen
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(char const*)
</UL>

<P><STRONG><a name="[231]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\filebase.o(.text._ZN4mbed8FileBase11getPathTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[22b]"></a>mbed::FileBase::lookup(char const*, unsigned int)</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, .\build\filebase.o(.text._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::Mutex() &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(char const*)
</UL>

<P><STRONG><a name="[22e]"></a>mbed::FileBase::FileBase(char const*, mbed::PathType)</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, .\build\filebase.o(.text._ZN4mbed8FileBaseC2EPKcNS_8PathTypeE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[227]"></a>mbed::FileBase::FileBase__sub_object(char const*, mbed::PathType)</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, .\build\filebase.o(.text._ZN4mbed8FileBaseC2EPKcNS_8PathTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::FileBase::FileBase__sub_object(char const*, mbed::PathType)
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(char const*)
</UL>

<P><STRONG><a name="[f9]"></a>mbed::FileBase::~FileBase__deallocating()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\filebase.o(.text._ZN4mbed8FileBaseD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::FileBase::~FileBase__deallocating() &rArr; operator delete(void*, unsigned int) &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr;  EvrRtxMutexError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filebase.o(.rodata._ZTVN4mbed8FileBaseE)
</UL>
<P><STRONG><a name="[22f]"></a>mbed::FileBase::~FileBase()</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, .\build\filebase.o(.text._ZN4mbed8FileBaseD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
</UL>

<P><STRONG><a name="[f8]"></a>mbed::FileBase::~FileBase__sub_object()</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, .\build\filebase.o(.text._ZN4mbed8FileBaseD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::FileBase::~FileBase__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase__deallocating()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Stream::~Stream()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filebase.o(.rodata._ZTVN4mbed8FileBaseE)
</UL>
<P><STRONG><a name="[230]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath10fileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::fileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[232]"></a>mbed::FilePath::file()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::file()
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[27d]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[233]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[27e]"></a>mbed::FilePath::fileName()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath8fileNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[234]"></a>mbed::FilePath::FilePath(char const*)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, .\build\filepath.o(.text._ZN4mbed8FilePathC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = mbed::FilePath::FilePath(char const*) &rArr; mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::Mutex() &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(char const*, unsigned int)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[2eb]"></a>mbed::FilePath::FilePath__sub_object(char const*)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, .\build\filepath.o(.text._ZN4mbed8FilePathC2EPKc), UNUSED)

<P><STRONG><a name="[1d3]"></a>mbed::internal::init_os_timer()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\mbed_os_timer.o(.text._ZN4mbed8internal13init_os_timerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = mbed::internal::init_os_timer() &rArr; mbed::internal::SysTimer&lang;1000u, true&rang;::SysTimer(ticker_data_t const*) &rArr; mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*) &rArr; ticker_set_handler &rArr; initialize &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::SysTimer(ticker_data_t const*)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lp_ticker_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>

<P><STRONG><a name="[238]"></a>void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, .\build\mbed_os_timer.o(.text._ZN4mbed8internal18do_sleep_operationINS0_18timed_predicate_opEEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&) &rArr; mbed::internal::SysTimer&lang;1000u, true&rang;::set_wake_time(unsigned long long) &rArr; ticker_read_us &rArr; initialize &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CriticalSectionLock::~CriticalSectionLock()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CriticalSectionLock::CriticalSectionLock()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::set_wake_time(unsigned long long)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_relative(unsigned int, bool (*)(void*), void*)
</UL>

<P><STRONG><a name="[1e6]"></a>mbed::internal::do_timed_sleep_relative(unsigned int, bool (*)(void*), void*)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, .\build\mbed_os_timer.o(.text._ZN4mbed8internal23do_timed_sleep_relativeEjPFbPvES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = mbed::internal::do_timed_sleep_relative(unsigned int, bool (*)(void*), void*) &rArr; void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&) &rArr; mbed::internal::SysTimer&lang;1000u, true&rang;::set_wake_time(unsigned long long) &rArr; ticker_read_us &rArr; initialize &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::get_tick() const
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::update_and_get_tick()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::cancel_wake()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::SysTimer(ticker_data_t const*)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lp_ticker_data
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[1d4]"></a>mbed::internal::SysTimer&lang;1000u, true&rang;::start_tick()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerILj1000ELb1EE10start_tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mbed::internal::SysTimer&lang;1000u, true&rang;::start_tick() &rArr; mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>

<P><STRONG><a name="[1d1]"></a>mbed::internal::SysTimer&lang;1000u, true&rang;::cancel_tick()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerILj1000ELb1EE11cancel_tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbed::internal::SysTimer&lang;1000u, true&rang;::cancel_tick() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Disable
</UL>

<P><STRONG><a name="[23c]"></a>mbed::internal::SysTimer&lang;1000u, true&rang;::cancel_wake()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerILj1000ELb1EE11cancel_wakeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = mbed::internal::SysTimer&lang;1000u, true&rang;::cancel_wake() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_relative(unsigned int, bool (*)(void*), void*)
</UL>

<P><STRONG><a name="[23a]"></a>mbed::internal::SysTimer&lang;1000u, true&rang;::set_wake_time(unsigned long long)</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerILj1000ELb1EE13set_wake_timeEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = mbed::internal::SysTimer&lang;1000u, true&rang;::set_wake_time(unsigned long long) &rArr; ticker_read_us &rArr; initialize &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(unsigned long long)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)
</UL>

<P><STRONG><a name="[1d6]"></a>mbed::internal::SysTimer&lang;1000u, true&rang;::get_irq_number()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerILj1000ELb1EE14get_irq_numberEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
</UL>

<P><STRONG><a name="[1cf]"></a>mbed::internal::SysTimer&lang;1000u, true&rang;::acknowledge_tick()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerILj1000ELb1EE16acknowledge_tickEv))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
</UL>

<P><STRONG><a name="[23d]"></a>mbed::internal::SysTimer&lang;1000u, true&rang;::update_and_get_tick()</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerILj1000ELb1EE19update_and_get_tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = mbed::internal::SysTimer&lang;1000u, true&rang;::update_and_get_tick() &rArr; ticker_read_us &rArr; initialize &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_relative(unsigned int, bool (*)(void*), void*)
</UL>

<P><STRONG><a name="[fc]"></a>mbed::internal::SysTimer&lang;1000u, true&rang;::handler()</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerILj1000ELb1EE7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbed::internal::SysTimer&lang;1000u, true&rang;::handler() &rArr; mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(unsigned long long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systimer.o(.rodata._ZTVN4mbed8internal8SysTimerILj1000ELb1EEE)
</UL>
<P><STRONG><a name="[237]"></a>mbed::internal::SysTimer&lang;1000u, true&rang;::SysTimer(ticker_data_t const*)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerILj1000ELb1EEC2EPK13ticker_data_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = mbed::internal::SysTimer&lang;1000u, true&rang;::SysTimer(ticker_data_t const*) &rArr; mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*) &rArr; ticker_set_handler &rArr; initialize &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::init_os_timer()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_relative(unsigned int, bool (*)(void*), void*)
</UL>

<P><STRONG><a name="[2ec]"></a>mbed::internal::SysTimer&lang;1000u, true&rang;::SysTimer__sub_object(ticker_data_t const*)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerILj1000ELb1EEC2EPK13ticker_data_t), UNUSED)

<P><STRONG><a name="[fb]"></a>mbed::internal::SysTimer&lang;1000u, true&rang;::~SysTimer__deallocating()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerILj1000ELb1EED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = mbed::internal::SysTimer&lang;1000u, true&rang;::~SysTimer__deallocating() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systimer.o(.rodata._ZTVN4mbed8internal8SysTimerILj1000ELb1EEE)
</UL>
<P><STRONG><a name="[240]"></a>mbed::internal::SysTimer&lang;1000u, true&rang;::~SysTimer()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerILj1000ELb1EED2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>

<P><STRONG><a name="[fa]"></a>mbed::internal::SysTimer&lang;1000u, true&rang;::~SysTimer__sub_object()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerILj1000ELb1EED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::internal::SysTimer&lang;1000u, true&rang;::~SysTimer__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systimer.o(.rodata._ZTVN4mbed8internal8SysTimerILj1000ELb1EEE)
</UL>
<P><STRONG><a name="[241]"></a>rtos::ThisThread::sleep_for(unsigned int)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\thisthread.o(.text._ZN4rtos10ThisThread9sleep_forEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtos::ThisThread::sleep_for(unsigned int) &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>

<P><STRONG><a name="[1ec]"></a>rtos::Mutex::lock()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\build\mutex.o(.text._ZN4rtos5Mutex4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = rtos::Mutex::lock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_get_error_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(char const*, mbed::PathType)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(char const*, unsigned int)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::lock()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Serial::lock()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::lock()
</UL>

<P><STRONG><a name="[1ed]"></a>rtos::Mutex::unlock()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\mutex.o(.text._ZN4rtos5Mutex6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_get_error_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(char const*, mbed::PathType)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(char const*, unsigned int)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::unlock()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Serial::unlock()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::unlock()
</UL>

<P><STRONG><a name="[1ea]"></a>rtos::Mutex::Mutex()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, .\build\mutex.o(.text._ZN4rtos5MutexC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = rtos::Mutex::Mutex() &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_get_error_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, char const*, int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(char const*, mbed::PathType)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(char const*, unsigned int)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::unlock()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::lock()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
</UL>

<P><STRONG><a name="[2ed]"></a>rtos::Mutex::Mutex__sub_object()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, .\build\mutex.o(.text._ZN4rtos5MutexC2Ev), UNUSED)

<P><STRONG><a name="[226]"></a>rtos::Mutex::~Mutex()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mutex.o(.text._ZN4rtos5MutexD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = rtos::Mutex::~Mutex() &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial__sub_object()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Serial::~Serial__deallocating()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Serial::~Serial()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Serial::~Serial__deallocating()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Serial::~Serial()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial__deallocating()
</UL>

<P><STRONG><a name="[2ee]"></a>rtos::Mutex::~Mutex__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mutex.o(.text._ZN4rtos5MutexD2Ev), UNUSED)

<P><STRONG><a name="[96]"></a>CThunk&lang;mbed::SerialBase&rang;::trampoline(CThunkBase*)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\serialbase.o(.text._ZN6CThunkIN4mbed10SerialBaseEE10trampolineEP10CThunkBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CThunk&lang;mbed::SerialBase&rang;::trampoline(CThunkBase*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.text._ZN4mbed10SerialBaseC2E7PinNameS1_i)
</UL>
<P><STRONG><a name="[ca]"></a>DirectSerial::poll(short) const</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZNK12DirectSerial4pollEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DirectSerial::poll(short) const &rArr; serial_writable
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[c7]"></a>mbed::FileHandle::is_blocking() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\file.o(.text._ZNK4mbed10FileHandle11is_blockingEv))
<BR>[Address Reference Count : 4]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
<LI> serial.o(.rodata._ZTVN4mbed6SerialE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[d1]"></a>mbed::FileHandle::poll(short) const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\file.o(.text._ZNK4mbed10FileHandle4pollEs))
<BR>[Address Reference Count : 3]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> serial.o(.rodata._ZTVN4mbed6SerialE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[23b]"></a>mbed::internal::SysTimer&lang;1000u, true&rang;::get_tick() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\systimer.o(.text._ZNK4mbed8internal8SysTimerILj1000ELb1EE8get_tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::internal::SysTimer&lang;1000u, true&rang;::get_tick() const &rArr; core_util_atomic_load_u64 &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_load_u64
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_relative(unsigned int, bool (*)(void*), void*)
</UL>

<P><STRONG><a name="[ee]"></a>non-virtual thunk to mbed::Serial::lock()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\serial.o(.text._ZThn348_N4mbed6Serial4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = non-virtual thunk to mbed::Serial::lock() &rArr; rtos::Mutex::lock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[ed]"></a>non-virtual thunk to mbed::Serial::_getc()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\serial.o(.text._ZThn348_N4mbed6Serial5_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = non-virtual thunk to mbed::Serial::_getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[ec]"></a>non-virtual thunk to mbed::Serial::_putc(int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\serial.o(.text._ZThn348_N4mbed6Serial5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = non-virtual thunk to mbed::Serial::_putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[ef]"></a>non-virtual thunk to mbed::Serial::unlock()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\serial.o(.text._ZThn348_N4mbed6Serial6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = non-virtual thunk to mbed::Serial::unlock() &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[e2]"></a>non-virtual thunk to mbed::Serial::~Serial__deallocating()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, .\build\serial.o(.text._ZThn348_N4mbed6SerialD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = non-virtual thunk to mbed::Serial::~Serial__deallocating() &rArr; rtos::Mutex::~Mutex() &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase__sub_object()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[e1]"></a>non-virtual thunk to mbed::Serial::~Serial()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\serial.o(.text._ZThn348_N4mbed6SerialD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = non-virtual thunk to mbed::Serial::~Serial() &rArr; rtos::Mutex::~Mutex() &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase__sub_object()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[f1]"></a>non-virtual thunk to mbed::Serial::~Serial__deallocating()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, .\build\serial.o(.text._ZThn352_N4mbed6SerialD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = non-virtual thunk to mbed::Serial::~Serial__deallocating() &rArr; rtos::Mutex::~Mutex() &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase__sub_object()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[f0]"></a>non-virtual thunk to mbed::Serial::~Serial()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\serial.o(.text._ZThn352_N4mbed6SerialD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = non-virtual thunk to mbed::Serial::~Serial() &rArr; rtos::Mutex::~Mutex() &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase__sub_object()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.rodata._ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[f7]"></a>non-virtual thunk to mbed::Stream::~Stream__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stream.o(.text._ZThn4_N4mbed6StreamD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[f6]"></a>non-virtual thunk to mbed::Stream::~Stream()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\stream.o(.text._ZThn4_N4mbed6StreamD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = non-virtual thunk to mbed::Stream::~Stream() &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase__sub_object()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.rodata._ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[206]"></a>operator delete(void*, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZdlPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = operator delete(void*, unsigned int) &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr;  EvrRtxMutexError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase__deallocating()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::~I2C__deallocating()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase__deallocating()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Serial::~Serial__deallocating()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to mbed::Serial::~Serial__deallocating()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial__deallocating()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::~SysTimer__deallocating()
</UL>

<P><STRONG><a name="[1e4]"></a>__cxa_atexit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text.__cxa_atexit))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[217]"></a>__cxa_guard_acquire</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[219]"></a>__cxa_guard_release</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text.__cxa_guard_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cxa_guard_release &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ce]"></a>__cxa_pure_virtual</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\libcxx\libcppabi_w.l(cxa_virtual.cpp.o)(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 3]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> stream.o(.rodata._ZTVN4mbed6StreamE)
<LI> timerevent.o(.rodata._ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[116]"></a>__rt_entry</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, .\build\mbed_boot_arm_std.o(.text.__rt_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = __rt_entry &rArr; mbed_init &rArr; mbed_sdk_init &rArr; BOARD_BootClockRUN &rArr; CLOCK_BootToPeeMode &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_start
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[14d]"></a>__user_perthread_libspace</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, .\build\mbed_boot_arm_std.o(.text.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __user_perthread_libspace &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[111]"></a>_mutex_acquire</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\build\mbed_boot_arm_std.o(.text._mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mutex_acquire &rArr; osMutexAcquire &rArr;  EvrRtxMutexError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>

<P><STRONG><a name="[113]"></a>_mutex_free</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, .\build\mbed_boot_arm_std.o(.text._mutex_free), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = _mutex_free &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>

<P><STRONG><a name="[110]"></a>_mutex_initialize</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, .\build\mbed_boot_arm_std.o(.text._mutex_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = _mutex_initialize &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[112]"></a>_mutex_release</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\mbed_boot_arm_std.o(.text._mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mutex_release &rArr; osMutexRelease &rArr;  EvrRtxMutexError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>

<P><STRONG><a name="[24a]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\rtx_lib.o(.text._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[16e]"></a>_sys_close</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _sys_close &rArr; mbed::mbed_file_handle(int) &rArr; __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[198]"></a>_sys_exit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[168]"></a>_sys_flen</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _sys_flen &rArr; mbed::mbed_file_handle(int) &rArr; __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[166]"></a>_sys_istty</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._sys_istty))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _sys_istty &rArr; mbed::mbed_file_handle(int) &rArr; __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[174]"></a>_sys_open</STRONG> (Thumb, 488 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(char const*) &rArr; mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::Mutex() &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_override_console(int)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_target_override_console(int)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial__sub_object(serial_pinmap_t const&, int)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[192]"></a>_sys_seek</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _sys_seek &rArr; mbed::mbed_file_handle(int) &rArr; __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[193]"></a>_sys_write</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(.text._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_is_isr_active
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1a5]"></a>_ttywrch</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(.text._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ttywrch &rArr; __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_override_console(int)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_target_override_console(int)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial__sub_object(serial_pinmap_t const&, int)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[1fa]"></a>_wait_us_generic</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\mbed_wait_api_no_rtos.o(.text._wait_us_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = _wait_us_generic &rArr; ticker_read &rArr; initialize &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grove_LCD_RGB_Backlight::Grove_LCD_RGB_Backlight(PinName, PinName)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::recover(PinName, PinName)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[1f9]"></a>_wait_us_ticks</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\mbed_wait_api_no_rtos.o(.text._wait_us_ticks))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grove_LCD_RGB_Backlight::Grove_LCD_RGB_Backlight(PinName, PinName)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::recover(PinName, PinName)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[248]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\libcxx\libcppabi_w.l(abort_message.cpp.o)(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[252]"></a>core_util_are_interrupts_enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\mbed_critical.o(.text.core_util_are_interrupts_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
</UL>

<P><STRONG><a name="[247]"></a>core_util_atomic_load_u64</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\mbed_atomic_impl.o(.text.core_util_atomic_load_u64))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = core_util_atomic_load_u64 &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::get_tick() const
</UL>

<P><STRONG><a name="[200]"></a>core_util_critical_section_enter</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\mbed_critical.o(.text.core_util_critical_section_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::input()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::output()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::mode(PinMode)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CriticalSectionLock::CriticalSectionLock()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vprintf
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_load_u64
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void ()&rang;, mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[204]"></a>core_util_critical_section_exit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\mbed_critical.o(.text.core_util_critical_section_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::input()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::output()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::mode(PinMode)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CriticalSectionLock::~CriticalSectionLock()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vprintf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_load_u64
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void ()&rang;, mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[251]"></a>core_util_is_isr_active</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\mbed_critical.o(.text.core_util_is_isr_active))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
</UL>

<P><STRONG><a name="[257]"></a>exit</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_override_console(int)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_target_override_console(int)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial__sub_object(serial_pinmap_t const&, int)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
</UL>

<P><STRONG><a name="[22a]"></a>fdopen</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(.text.fdopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(char const*) &rArr; mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::Mutex() &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, char const*)
</UL>

<P><STRONG><a name="[236]"></a>get_lp_ticker_data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\mbed_lp_ticker_api.o(.text.get_lp_ticker_data))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::init_os_timer()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_relative(unsigned int, bool (*)(void*), void*)
</UL>

<P><STRONG><a name="[253]"></a>get_us_ticker_data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\mbed_us_ticker_api.o(.text.get_us_ticker_data))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_us_generic
</UL>

<P><STRONG><a name="[213]"></a>gpio_dir</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, .\build\gpio_api.o(.text.gpio_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_dir &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_inout
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::input()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::output()
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[259]"></a>gpio_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\gpio_api.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_inout
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[1cd]"></a>gpio_init_in</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(.text.gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpio_init_in &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitDisplay::DigitDisplay(PinName, PinName)
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[221]"></a>gpio_init_inout</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, .\build\mbed_gpio.o(.text.gpio_init_inout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gpio_init_inout &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::recover(PinName, PinName)
</UL>

<P><STRONG><a name="[1ee]"></a>gpio_init_out</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(.text.gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitDisplay::DigitDisplay(PinName, PinName)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[211]"></a>gpio_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\gpio_api.o(.text.gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_inout
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::mode(PinMode)
</UL>

<P><STRONG><a name="[222]"></a>gpio_read</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, .\build\gpio_api.o(.text.gpio_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_read &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::recover(PinName, PinName)
</UL>

<P><STRONG><a name="[1f0]"></a>gpio_write</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, .\build\gpio_api.o(.text.gpio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_write &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_inout
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitDisplay::DigitDisplay(PinName, PinName)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::recover(PinName, PinName)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[255]"></a>hal_critical_section_enter</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, .\build\mbed_critical_section_api.o(.text.hal_critical_section_enter))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>

<P><STRONG><a name="[256]"></a>hal_critical_section_exit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\build\mbed_critical_section_api.o(.text.hal_critical_section_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
</UL>

<P><STRONG><a name="[25c]"></a>hal_sleep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\sleep.o(.text.hal_sleep))
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMC_SetPowerModeWait
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>

<P><STRONG><a name="[21e]"></a>i2c_frequency</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\build\i2c_api.o(.text.i2c_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = i2c_frequency &rArr; CLOCK_GetFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetPll0Freq &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterSetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, char const*, int, bool)
</UL>

<P><STRONG><a name="[223]"></a>i2c_init</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, .\build\i2c_api.o(.text.i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = i2c_init &rArr; i2c_init_direct &rArr; I2C_MasterInit &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_function
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
</UL>

<P><STRONG><a name="[262]"></a>i2c_init_direct</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, .\build\i2c_api.o(.text.i2c_init_direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = i2c_init_direct &rArr; I2C_MasterInit &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EnableInterrupts
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterGetDefaultConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[21f]"></a>i2c_write</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, .\build\i2c_api.o(.text.i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = i2c_write &rArr; I2C_MasterTransferBlocking &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferBlocking
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterStop
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, char const*, int, bool)
</UL>

<P><STRONG><a name="[100]"></a>lp_ticker_clear_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\lp_ticker.o(.text.lp_ticker_clear_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[ff]"></a>lp_ticker_disable_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\lp_ticker.o(.text.lp_ticker_disable_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[102]"></a>lp_ticker_fire_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\lp_ticker.o(.text.lp_ticker_fire_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[103]"></a>lp_ticker_free</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\lp_ticker.o(.text.lp_ticker_free))
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[104]"></a>lp_ticker_get_info</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\lp_ticker.o(.text.lp_ticker_get_info))
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[fd]"></a>lp_ticker_init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, .\build\lp_ticker.o(.text.lp_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = lp_ticker_init &rArr; LPTMR_Init &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_GetDefaultConfig
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[269]"></a>lp_ticker_irq_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\mbed_lp_ticker_api.o(.text.lp_ticker_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_isr
</UL>

<P><STRONG><a name="[fe]"></a>lp_ticker_read</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\lp_ticker.o(.text.lp_ticker_read))
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[101]"></a>lp_ticker_set_interrupt</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, .\build\lp_ticker.o(.text.lp_ticker_set_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[26a]"></a>main</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = main &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start
</UL>

<P><STRONG><a name="[1d8]"></a>mbed_assert_internal</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\mbed_assert.o(.text.mbed_assert_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::ThisThread::sleep_for(unsigned int)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(char const*)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(char const*, mbed::PathType)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(char const*, unsigned int)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::unlock()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init_direct
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::lock()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init_direct
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::set_wake_time(unsigned long long)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::update_and_get_tick()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::cancel_wake()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_exit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[258]"></a>mbed_die</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, .\build\mbed_board.o(.text.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = mbed_die &rArr; _wait_us_generic &rArr; ticker_read &rArr; initialize &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_us_generic
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_us_ticks
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
</UL>

<P><STRONG><a name="[1b9]"></a>mbed_error</STRONG> (Thumb, 540 bytes, Stack size 72 bytes, .\build\mbed_error.o(.text.mbed_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reset
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_start
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(char const*)
</UL>

<P><STRONG><a name="[26e]"></a>mbed_error_initialize</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, .\build\mbed_error.o(.text.mbed_error_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = mbed_error_initialize &rArr; mbed_halt_system &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_reboot_callback
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start
</UL>

<P><STRONG><a name="[26c]"></a>mbed_error_printf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, .\build\mbed_board.o(.text.mbed_error_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_context_info
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
</UL>

<P><STRONG><a name="[272]"></a>mbed_error_puts</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\mbed_board.o(.text.mbed_error_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbed_error_puts &rArr; write &rArr; mbed::mbed_file_handle(int) &rArr; __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
</UL>

<P><STRONG><a name="[26f]"></a>mbed_error_reboot_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_error.o(.text.mbed_error_reboot_callback))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_initialize
</UL>

<P><STRONG><a name="[271]"></a>mbed_error_vprintf</STRONG> (Thumb, 82 bytes, Stack size 144 bytes, .\build\mbed_board.o(.text.mbed_error_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>

<P><STRONG><a name="[148]"></a>mbed_fault_handler</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, .\build\mbed_fault_handler.o(.text.mbed_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = mbed_fault_handler &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_context_info
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Handler
</UL>

<P><STRONG><a name="[1b7]"></a>mbed_get_error_in_progress</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\mbed_error.o(.text.mbed_get_error_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>

<P><STRONG><a name="[249]"></a>mbed_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, .\build\mbed_boot.o(.text.mbed_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = mbed_init &rArr; mbed_sdk_init &rArr; BOARD_BootClockRUN &rArr; CLOCK_BootToPeeMode &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[27a]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_boot.o(.text.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start
</UL>

<P><STRONG><a name="[276]"></a>mbed_rtos_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_rtos_rtx.o(.text.mbed_rtos_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = mbed_rtos_init &rArr; osKernelInitialize &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_init
</UL>

<P><STRONG><a name="[24b]"></a>mbed_rtos_start</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, .\build\mbed_rtos_rtx.o(.text.mbed_rtos_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = mbed_rtos_start &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[275]"></a>mbed_sdk_init</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, .\build\mbed_overrides.o(.text.mbed_sdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = mbed_sdk_init &rArr; BOARD_BootClockRUN &rArr; CLOCK_BootToPeeMode &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDefaultConfig
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_init
</UL>

<P><STRONG><a name="[99]"></a>mbed_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\mbed_boot.o(.text.mbed_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = mbed_start &rArr; mbed_error_initialize &rArr; mbed_halt_system &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_initialize
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_toolchain_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_rtos_rtx.o(.text.mbed_rtos_start)
</UL>
<P><STRONG><a name="[279]"></a>mbed_toolchain_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\mbed_boot_arm_std.o(.text.mbed_toolchain_init))
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start
</UL>

<P><STRONG><a name="[250]"></a>open</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, .\build\mbed_retarget.o(.text.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = open &rArr; mbed::FilePath::FilePath(char const*) &rArr; mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::Mutex() &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(char const*)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[242]"></a>osDelay</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, .\build\rtx_delay.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::ThisThread::sleep_for(unsigned int)
</UL>

<P><STRONG><a name="[24c]"></a>osKernelGetState</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(.text.osKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[24e]"></a>osKernelInitialize</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = osKernelInitialize &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_init
</UL>

<P><STRONG><a name="[1e7]"></a>osKernelResume</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(.text.osKernelResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = osKernelResume &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[278]"></a>osKernelStart</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = osKernelStart &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_start
</UL>

<P><STRONG><a name="[1e5]"></a>osKernelSuspend</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(.text.osKernelSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = osKernelSuspend &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[281]"></a>osMessageQueueGet</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = osMessageQueueGet &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[284]"></a>osMessageQueueNew</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\rtx_msgqueue.o(.text.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = osMessageQueueNew &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[285]"></a>osMessageQueuePut</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = osMessageQueuePut &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[1e9]"></a>osMutexAcquire</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, .\build\rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = osMutexAcquire &rArr;  EvrRtxMutexError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(char const*, mbed::PathType)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(char const*, unsigned int)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::unlock()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::lock()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[244]"></a>osMutexDelete</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, .\build\rtx_mutex.o(.text.osMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = osMutexDelete &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[243]"></a>osMutexNew</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_start
</UL>

<P><STRONG><a name="[1eb]"></a>osMutexRelease</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, .\build\rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = osMutexRelease &rArr;  EvrRtxMutexError (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(char const*, mbed::PathType)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(char const*, unsigned int)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::unlock()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::lock()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
</UL>

<P><STRONG><a name="[24d]"></a>osRtxErrorNotify</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(.text.osRtxErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>

<P><STRONG><a name="[a7]"></a>osRtxIdleThread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_rtx_handlers.o(.text.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_idle_loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[280]"></a>osRtxKernelPreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(.text.osRtxKernelPreInit))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[2a0]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, .\build\rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[290]"></a>osRtxMemoryFree</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, .\build\rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[29d]"></a>osRtxMemoryInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, .\build\rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[286]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, .\build\rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[288]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, .\build\rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[29e]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, .\build\rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[28c]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, .\build\rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[149]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, .\build\rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[283]"></a>osRtxPostProcess</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, .\build\rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxPostProcess &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[294]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDelayTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelResume
</UL>

<P><STRONG><a name="[28d]"></a>osRtxThreadDispatch</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelResume
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[289]"></a>osRtxThreadListGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>

<P><STRONG><a name="[29f]"></a>osRtxThreadListPut</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[295]"></a>osRtxThreadListRemove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[2a2]"></a>osRtxThreadListSort</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[296]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[28b]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[28e]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadStackCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[291]"></a>osRtxThreadStartup</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; EvrRtxThreadError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[292]"></a>osRtxThreadSwitch</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[293]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, .\build\rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[28a]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>

<P><STRONG><a name="[14a]"></a>osRtxTick_Handler</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, .\build\rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a8]"></a>osRtxTimerThread</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, .\build\rtx_timer.o(.text.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[b4]"></a>osThreadExit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = osThreadExit &rArr; EvrRtxThreadError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[1be]"></a>osThreadGetId</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osThreadGetId))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[277]"></a>osThreadNew</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = osThreadNew &rArr; EvrRtxThreadError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_start
</UL>

<P><STRONG><a name="[25a]"></a>pin_function</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, .\build\pinmap.o(.text.pin_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pin_function &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init_direct
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init_direct
</UL>

<P><STRONG><a name="[25b]"></a>pin_mode</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, .\build\pinmap.o(.text.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pin_mode &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init_direct
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init_direct
</UL>

<P><STRONG><a name="[261]"></a>pinmap_find_function</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_find_function))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[260]"></a>pinmap_merge</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = pinmap_merge &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[25f]"></a>pinmap_peripheral</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = pinmap_peripheral &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[274]"></a>print_context_info</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, .\build\mbed_fault_handler.o(.text.print_context_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = print_context_info &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
</UL>

<P><STRONG><a name="[287]"></a>rtos_idle_loop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\mbed_rtx_idle.o(.text.rtos_idle_loop))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>

<P><STRONG><a name="[1f5]"></a>serial_baud</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\serial_api.o(.text.serial_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = serial_baud &rArr; CLOCK_GetFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetPll0Freq &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial(serial_pinmap_t const&, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_init()
</UL>

<P><STRONG><a name="[1f1]"></a>serial_getc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\build\serial_api.o(.text.serial_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearStatusFlags
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::read(void*, unsigned int)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>

<P><STRONG><a name="[1fd]"></a>serial_init</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, .\build\serial_api.o(.text.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = serial_init &rArr; serial_init_direct &rArr; UART_Init &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_function
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_init()
</UL>

<P><STRONG><a name="[1f4]"></a>serial_init_direct</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, .\build\serial_api.o(.text.serial_init_direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = serial_init_direct &rArr; UART_Init &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetDefaultConfig
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial(serial_pinmap_t const&, int)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[1fe]"></a>serial_irq_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\serial_api.o(.text.serial_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_init()
</UL>

<P><STRONG><a name="[203]"></a>serial_irq_set</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, .\build\serial_api.o(.text.serial_irq_set), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetEnabledInterrupts
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInterrupts
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void ()&rang;, mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[1f2]"></a>serial_putc</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, .\build\serial_api.o(.text.serial_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearStatusFlags
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::write(void const*, unsigned int)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>

<P><STRONG><a name="[245]"></a>serial_readable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\serial_api.o(.text.serial_readable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial_readable
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearStatusFlags
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::poll(short) const
</UL>

<P><STRONG><a name="[246]"></a>serial_writable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\serial_api.o(.text.serial_writable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial_writable
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearStatusFlags
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::poll(short) const
</UL>

<P><STRONG><a name="[201]"></a>sleep_manager_lock_deep_sleep_internal</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\build\mbed_power_mgmt.o(.text.sleep_manager_lock_deep_sleep_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::set_wake_time(unsigned long long)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void ()&rang;, mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[239]"></a>sleep_manager_sleep_auto</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\mbed_power_mgmt.o(.text.sleep_manager_sleep_auto))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sleep_manager_sleep_auto &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)
</UL>

<P><STRONG><a name="[202]"></a>sleep_manager_unlock_deep_sleep_internal</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, .\build\mbed_power_mgmt.o(.text.sleep_manager_unlock_deep_sleep_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::cancel_wake()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void ()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::~SysTimer()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::~SysTimer__deallocating()
</UL>

<P><STRONG><a name="[20a]"></a>ticker_insert_event_us</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, .\build\mbed_ticker_api.o(.text.ticker_insert_event_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ticker_insert_event_us &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(unsigned long long)
</UL>

<P><STRONG><a name="[10f]"></a>ticker_irq_handler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(.text.ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ticker_irq_handler &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mbed_lp_ticker_api.o(.data.irq_handler)
<LI> mbed_us_ticker_api.o(.data.irq_handler)
</UL>
<P><STRONG><a name="[254]"></a>ticker_read</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\mbed_ticker_api.o(.text.ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = ticker_read &rArr; initialize &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_us_generic
</UL>

<P><STRONG><a name="[23e]"></a>ticker_read_us</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(.text.ticker_read_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ticker_read_us &rArr; initialize &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::set_wake_time(unsigned long long)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::update_and_get_tick()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;1000u, true&rang;::SysTimer(ticker_data_t const*)
</UL>

<P><STRONG><a name="[20c]"></a>ticker_remove_event</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(.text.ticker_remove_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent()
</UL>

<P><STRONG><a name="[20e]"></a>ticker_set_handler</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(.text.ticker_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ticker_set_handler &rArr; initialize &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*)
</UL>

<P><STRONG><a name="[ad]"></a>uart0_irq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, .\build\serial_api.o(.text.uart0_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart0_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetEnabledInterrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(.text.serial_irq_set)
</UL>
<P><STRONG><a name="[b1]"></a>uart1_irq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, .\build\serial_api.o(.text.uart1_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart1_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetEnabledInterrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(.text.serial_irq_set)
</UL>
<P><STRONG><a name="[af]"></a>uart2_irq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, .\build\serial_api.o(.text.uart2_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart2_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetEnabledInterrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(.text.serial_irq_set)
</UL>
<P><STRONG><a name="[b0]"></a>uart3_irq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, .\build\serial_api.o(.text.uart3_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart3_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetEnabledInterrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(.text.serial_irq_set)
</UL>
<P><STRONG><a name="[ae]"></a>uart4_irq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, .\build\serial_api.o(.text.uart4_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart4_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetEnabledInterrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(.text.serial_irq_set)
</UL>
<P><STRONG><a name="[b2]"></a>uart5_irq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, .\build\serial_api.o(.text.uart5_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart5_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetEnabledInterrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(.text.serial_irq_set)
</UL>
<P><STRONG><a name="[108]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_clear_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[107]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_disable_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[10a]"></a>us_ticker_fire_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_fire_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[27b]"></a>us_ticker_free</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_free))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;note_us_ticker_free
</UL>

<P><STRONG><a name="[10c]"></a>us_ticker_get_info</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_get_info))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[27c]"></a>us_ticker_init</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, .\build\us_ticker.o(.text.us_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = us_ticker_init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetPll0Freq &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;note_us_ticker_init
</UL>

<P><STRONG><a name="[297]"></a>us_ticker_irq_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\mbed_us_ticker_api.o(.text.us_ticker_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_isr
</UL>

<P><STRONG><a name="[106]"></a>us_ticker_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_read))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[109]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_set_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[1f8]"></a>wait_ms</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\build\mbed_wait_api_rtos.o(.text.wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = wait_ms &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::ThisThread::sleep_for(unsigned int)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_is_isr_active
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grove_LCD_RGB_Backlight::Grove_LCD_RGB_Backlight(PinName, PinName)
</UL>

<P><STRONG><a name="[273]"></a>write</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write &rArr; mbed::mbed_file_handle(int) &rArr; __cxa_guard_acquire &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vprintf
</UL>

<P><STRONG><a name="[186]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2a5]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[2a4]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[2a6]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[2a7]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[187]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[188]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[2a8]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[18b]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\m_wm.l(fpclassify.o)(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[163]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__printf_wp.o)(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[19c]"></a>_fputc$unlocked</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fputc.o)(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>

<P><STRONG><a name="[8f]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(lc_ctype_c.o)(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[143]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(lc_numeric_c.o)(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[13c]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(fpinit.o)(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[2ef]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(fpinit.o)(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2f0]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(fpinit.o)(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[11e]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(printf1.o)(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[122]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(printf2.o)(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10d]"></a>_GLOBAL__sub_I_main.cpp</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, .\build\main.o(.text._GLOBAL__sub_I_main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_main.cpp &rArr; Grove_LCD_RGB_Backlight::Grove_LCD_RGB_Backlight(PinName, PinName) &rArr; mbed::I2C::I2C(PinName, PinName) &rArr; i2c_init &rArr; i2c_init_direct &rArr; I2C_MasterInit &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, char const*, int)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grove_LCD_RGB_Backlight::Grove_LCD_RGB_Backlight(PinName, PinName)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitDisplay::DigitDisplay(PinName, PinName)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[1ae]"></a>CLOCK_GetFllRefClkFreq</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, .\build\fsl_clock.o(.text.CLOCK_GetFllRefClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = CLOCK_GetFllRefClkFreq &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
</UL>

<P><STRONG><a name="[1b3]"></a>DSPI_MasterTransferFillUpTxFifo</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, .\build\fsl_dspi.o(.text.DSPI_MasterTransferFillUpTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = DSPI_MasterTransferFillUpTxFifo &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterTransferHandleIRQ
</UL>

<P><STRONG><a name="[98]"></a>lptmr_isr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\lp_ticker.o(.text.lptmr_isr))
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lp_ticker.o(.text.lp_ticker_init)
</UL>
<P><STRONG><a name="[26b]"></a>print_error_report</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, .\build\mbed_error.o(.text.print_error_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>

<P><STRONG><a name="[270]"></a>mbed_halt_system</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, .\build\mbed_error.o(.text.mbed_halt_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = mbed_halt_system &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_is_isr_active
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_initialize
</UL>

<P><STRONG><a name="[26d]"></a>system_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_error.o(.text.system_reset))
<BR><BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>

<P><STRONG><a name="[2a3]"></a>__NVIC_SystemReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, .\build\mbed_error.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reset
</UL>

<P><STRONG><a name="[1e8]"></a>reserve_filehandle()</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(.text._ZL18reserve_filehandlev))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = reserve_filehandle() &rArr; rtos::Mutex::Mutex() &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, char const*)
</UL>

<P><STRONG><a name="[1b8]"></a>error_msg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\mbed_rtx_handlers.o(.text.error_msg))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>

<P><STRONG><a name="[10e]"></a>default_idle_hook()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\mbed_rtx_idle.o(.text._ZL17default_idle_hookv))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = default_idle_hook() &rArr; mbed::internal::do_timed_sleep_relative(unsigned int, bool (*)(void*), void*) &rArr; void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&) &rArr; mbed::internal::SysTimer&lang;1000u, true&rang;::set_wake_time(unsigned long long) &rArr; ticker_read_us &rArr; initialize &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_relative(unsigned int, bool (*)(void*), void*)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelResume
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_rtx_idle.o(.data._ZL14idle_hook_fptr)
</UL>
<P><STRONG><a name="[93]"></a>rtos_event_pending(void*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\mbed_rtx_idle.o(.text._ZL18rtos_event_pendingPv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_rtx_idle.o(.text._ZL17default_idle_hookv)
</UL>
<P><STRONG><a name="[266]"></a>initialize</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, .\build\mbed_ticker_api.o(.text.initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = initialize &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
</UL>

<P><STRONG><a name="[267]"></a>update_present_time</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, .\build\mbed_ticker_api.o(.text.update_present_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[268]"></a>schedule_interrupt</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, .\build\mbed_ticker_api.o(.text.schedule_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[105]"></a>note_us_ticker_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\mbed_us_ticker_api.o(.text.note_us_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = note_us_ticker_init &rArr; us_ticker_init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetPll0Freq &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[10b]"></a>note_us_ticker_free</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\mbed_us_ticker_api.o(.text.note_us_ticker_free))
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[9a]"></a>svcRtxDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[9c]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, .\build\rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelInitialize &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[9b]"></a>svcRtxKernelGetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(.text.svcRtxKernelGetState))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[9e]"></a>svcRtxKernelStart</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, .\build\rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelStart &rArr; OS_Tick_Enable &rArr; mbed::internal::init_os_timer() &rArr; mbed::internal::SysTimer&lang;1000u, true&rang;::SysTimer(ticker_data_t const*) &rArr; mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*) &rArr; ticker_set_handler &rArr; initialize &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[9f]"></a>svcRtxKernelSuspend</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, .\build\rtx_kernel.o(.text.svcRtxKernelSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelSuspend &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelSuspend)
</UL>
<P><STRONG><a name="[9d]"></a>svcRtxKernelResume</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, .\build\rtx_kernel.o(.text.svcRtxKernelResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelResume &rArr; OS_Tick_Enable &rArr; mbed::internal::init_os_timer() &rArr; mbed::internal::SysTimer&lang;1000u, true&rang;::SysTimer(ticker_data_t const*) &rArr; mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*) &rArr; ticker_set_handler &rArr; initialize &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelResume)
</UL>
<P><STRONG><a name="[a1]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, .\build\rtx_msgqueue.o(.text.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueueNew &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueNew)
</UL>
<P><STRONG><a name="[a2]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(.text.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueuePut &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL>
<P><STRONG><a name="[a0]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, .\build\rtx_msgqueue.o(.text.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueueGet &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueGet)
</UL>
<P><STRONG><a name="[b3]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[a5]"></a>svcRtxMutexNew</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, .\build\rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = svcRtxMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[a3]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = svcRtxMutexAcquire &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[a6]"></a>svcRtxMutexRelease</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = svcRtxMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[a4]"></a>svcRtxMutexDelete</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = svcRtxMutexDelete &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[ac]"></a>svcRtxThreadNew</STRONG> (Thumb, 532 bytes, Stack size 40 bytes, .\build\rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = svcRtxThreadNew &rArr; EvrRtxThreadError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[b5]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadPostProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[ab]"></a>svcRtxThreadGetId</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.svcRtxThreadGetId))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadGetId)
</UL>
<P><STRONG><a name="[aa]"></a>svcRtxThreadExit</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[28f]"></a>osRtxThreadFree</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[a9]"></a>osRtxTimerTick</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, .\build\rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osRtxTimerThread)
</UL>
<P><STRONG><a name="[b6]"></a>pit_isr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.pit_isr))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker.o(.text.us_ticker_init)
</UL>
<P><STRONG><a name="[14f]"></a>AlignUp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_alloc_threads.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
</UL>

<P><STRONG><a name="[14e]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_alloc_threads.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignUp
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
</UL>

<P><STRONG><a name="[173]"></a>_freopen_locked</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fopen_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(char const*) &rArr; mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::Mutex() &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[184]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[91]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[199]"></a>AlignUpOffset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, C:\Users\davidross\AppData\Local\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_extend_threads.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
